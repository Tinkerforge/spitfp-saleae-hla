#############################################################
# This file was automatically generated on 2021-02-10.      #
#                                                           #
# Saleae Bindings Version 2.0.4                             #
#                                                           #
# If you have a bugfix for this file and want to commit it, #
# please fix the bug in the generator. You can find a link  #
# to the generators git repository on tinkerforge.com       #
#############################################################


import json
import os
import sys
import struct
import re

from saleae.analyzers import HighLevelAnalyzer, AnalyzerFrame, StringSetting, NumberSetting, ChoicesSetting

# internal
def unpack_payload(data, form):
    ret = []

    for f in form.split(' '):
        o = f

        if '!' in f:
            if len(f) > 1:
                f = '{0}B'.format(int(math.ceil(int(f.replace('!', '')) / 8.0)))
            else:
                f = 'B'

        f = '<' + f
        length = struct.calcsize(f)
        x = struct.unpack(f, data[:length])

        if '!' in o:
            y = []

            if len(o) > 1:
                for i in range(int(o.replace('!', ''))):
                    y.append(x[i // 8] & (1 << (i % 8)) != 0)
            else:
                y.append(x[0] != 0)

            x = tuple(y)

        if 'c' in f:
            if sys.hexversion < 0x03000000:
                if len(x) > 1:
                    ret.append(x)
                else:
                    ret.append(x[0])
            else:
                if len(x) > 1:
                    ret.append(tuple(map(lambda item: chr(ord(item)), x)))
                else:
                    ret.append(chr(ord(x[0])))
        elif 's' in f:
            if sys.hexversion < 0x03000000:
                s = x[0]
            else:
                s = ''.join(map(chr, x[0]))

            i = s.find('\x00')

            if i >= 0:
                s = s[:i]

            ret.append(s)
        elif len(x) > 1:
            ret.append(x)
        else:
            ret.append(x[0])

        data = data[length:]

    if len(ret) == 1:
        return ret[0]
    else:
        return ret



device_infos = {
    111: {
    'device_identifier': 111,
    'name': 'HAT Brick',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Sleep Mode',
            'elements': [
                {
                    'name': 'Power Off Delay',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Power Off Duration',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Raspberry Pi Off',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Bricklets Off',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Enable Sleep Indicator',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I I ! ! !',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Sleep Mode',
            'elements': [
                {
                    'name': 'Power Off Delay',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Power Off Duration',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Raspberry Pi Off',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Bricklets Off',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enable Sleep Indicator',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I ! ! !',
        },
        3: {
            'function_id': 3,
            'name': 'Set Bricklet Power',
            'elements': [
                {
                    'name': 'Bricklet Power',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Bricklet Power',
            'elements': [
                {
                    'name': 'Bricklet Power',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        5: {
            'function_id': 5,
            'name': 'Get Voltages',
            'elements': [
                {
                    'name': 'Voltage USB',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Voltage DC',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        6: {
            'function_id': 6,
            'name': 'Set Voltages Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Voltages Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        8: {
            'function_id': 8,
            'name': 'Voltages',
            'elements': [
                {
                    'name': 'Voltage USB',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Voltage DC',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
112: {
    'device_identifier': 112,
    'name': 'HAT Zero Brick',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get USB Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        2: {
            'function_id': 2,
            'name': 'Set USB Voltage Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get USB Voltage Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        4: {
            'function_id': 4,
            'name': 'USB Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2130: {
    'device_identifier': 2130,
    'name': 'Accelerometer Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Acceleration',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Data Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Full Scale',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Data Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Full Scale',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        4: {
            'function_id': 4,
            'name': 'Set Acceleration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Acceleration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        6: {
            'function_id': 6,
            'name': 'Set Info LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Info LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        8: {
            'function_id': 8,
            'name': 'Acceleration',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i i',
        },
        9: {
            'function_id': 9,
            'name': 'Set Continuous Acceleration Configuration',
            'elements': [
                {
                    'name': 'Enable X',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Enable Y',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Enable Z',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Resolution',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '! ! ! B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Continuous Acceleration Configuration',
            'elements': [
                {
                    'name': 'Enable X',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enable Y',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enable Z',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Resolution',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! ! ! B',
        },
        11: {
            'function_id': 11,
            'name': 'Continuous Acceleration 16 Bit',
            'elements': [
                {
                    'name': 'Acceleration',
                    'type': 'int16',
                    'cardinality': '30',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '30h',
        },
        12: {
            'function_id': 12,
            'name': 'Continuous Acceleration 8 Bit',
            'elements': [
                {
                    'name': 'Acceleration',
                    'type': 'int8',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '60b',
        },
        13: {
            'function_id': 13,
            'name': 'Set Filter Configuration',
            'elements': [
                {
                    'name': 'IIR Bypass',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Low Pass Filter',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Filter Configuration',
            'elements': [
                {
                    'name': 'IIR Bypass',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Low Pass Filter',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
297: {
    'device_identifier': 297,
    'name': 'Air Quality Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get All Values',
            'elements': [
                {
                    'name': 'IAQ Index',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'IAQ Index Accuracy',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Humidity',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i B i i i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Temperature Offset',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Temperature Offset',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        4: {
            'function_id': 4,
            'name': 'Set All Values Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get All Values Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        6: {
            'function_id': 6,
            'name': 'All Values',
            'elements': [
                {
                    'name': 'IAQ Index',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'IAQ Index Accuracy',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Humidity',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i B i i i',
        },
        7: {
            'function_id': 7,
            'name': 'Get IAQ Index',
            'elements': [
                {
                    'name': 'IAQ Index',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'IAQ Index Accuracy',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i B',
        },
        8: {
            'function_id': 8,
            'name': 'Set IAQ Index Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get IAQ Index Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        10: {
            'function_id': 10,
            'name': 'IAQ Index',
            'elements': [
                {
                    'name': 'IAQ Index',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'IAQ Index Accuracy',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i B',
        },
        11: {
            'function_id': 11,
            'name': 'Get Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        12: {
            'function_id': 12,
            'name': 'Set Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        13: {
            'function_id': 13,
            'name': 'Get Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        14: {
            'function_id': 14,
            'name': 'Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        15: {
            'function_id': 15,
            'name': 'Get Humidity',
            'elements': [
                {
                    'name': 'Humidity',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        16: {
            'function_id': 16,
            'name': 'Set Humidity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        17: {
            'function_id': 17,
            'name': 'Get Humidity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        18: {
            'function_id': 18,
            'name': 'Humidity',
            'elements': [
                {
                    'name': 'Humidity',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        19: {
            'function_id': 19,
            'name': 'Get Air Pressure',
            'elements': [
                {
                    'name': 'Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        20: {
            'function_id': 20,
            'name': 'Set Air Pressure Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        21: {
            'function_id': 21,
            'name': 'Get Air Pressure Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        22: {
            'function_id': 22,
            'name': 'Air Pressure',
            'elements': [
                {
                    'name': 'Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        23: {
            'function_id': 23,
            'name': 'Remove Calibration',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        24: {
            'function_id': 24,
            'name': 'Set Background Calibration Duration',
            'elements': [
                {
                    'name': 'Duration',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        25: {
            'function_id': 25,
            'name': 'Get Background Calibration Duration',
            'elements': [
                {
                    'name': 'Duration',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2131: {
    'device_identifier': 2131,
    'name': 'Ambient Light Bricklet 3.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Illuminance',
            'elements': [
                {
                    'name': 'Illuminance',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        2: {
            'function_id': 2,
            'name': 'Set Illuminance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c I I',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Illuminance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c I I',
        },
        4: {
            'function_id': 4,
            'name': 'Illuminance',
            'elements': [
                {
                    'name': 'Illuminance',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        5: {
            'function_id': 5,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Illuminance Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Integration Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Illuminance Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Integration Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
295: {
    'device_identifier': 295,
    'name': 'Analog In Bricklet 3.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        2: {
            'function_id': 2,
            'name': 'Set Voltage Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Voltage Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        4: {
            'function_id': 4,
            'name': 'Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        5: {
            'function_id': 5,
            'name': 'Set Oversampling',
            'elements': [
                {
                    'name': 'Oversampling',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Oversampling',
            'elements': [
                {
                    'name': 'Oversampling',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        7: {
            'function_id': 7,
            'name': 'Set Calibration',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Multiplier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Divisor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'h H H',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Calibration',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Multiplier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Divisor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h H H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2115: {
    'device_identifier': 2115,
    'name': 'Analog Out Bricklet 3.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Output Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Output Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        3: {
            'function_id': 3,
            'name': 'Get Input Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2117: {
    'device_identifier': 2117,
    'name': 'Barometer Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Air Pressure',
            'elements': [
                {
                    'name': 'Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Air Pressure Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Air Pressure Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'Air Pressure',
            'elements': [
                {
                    'name': 'Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        5: {
            'function_id': 5,
            'name': 'Get Altitude',
            'elements': [
                {
                    'name': 'Altitude',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        6: {
            'function_id': 6,
            'name': 'Set Altitude Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Altitude Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        8: {
            'function_id': 8,
            'name': 'Altitude',
            'elements': [
                {
                    'name': 'Altitude',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        9: {
            'function_id': 9,
            'name': 'Get Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        10: {
            'function_id': 10,
            'name': 'Set Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        12: {
            'function_id': 12,
            'name': 'Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        13: {
            'function_id': 13,
            'name': 'Set Moving Average Configuration',
            'elements': [
                {
                    'name': 'Moving Average Length Air Pressure',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Moving Average Length Temperature',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Moving Average Configuration',
            'elements': [
                {
                    'name': 'Moving Average Length Air Pressure',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Moving Average Length Temperature',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        15: {
            'function_id': 15,
            'name': 'Set Reference Air Pressure',
            'elements': [
                {
                    'name': 'Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'i',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get Reference Air Pressure',
            'elements': [
                {
                    'name': 'Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        17: {
            'function_id': 17,
            'name': 'Set Calibration',
            'elements': [
                {
                    'name': 'Measured Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Actual Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'i i',
            'out_struct_format': '',
        },
        18: {
            'function_id': 18,
            'name': 'Get Calibration',
            'elements': [
                {
                    'name': 'Measured Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Actual Air Pressure',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i',
        },
        19: {
            'function_id': 19,
            'name': 'Set Sensor Configuration',
            'elements': [
                {
                    'name': 'Data Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Air Pressure Low Pass Filter',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        20: {
            'function_id': 20,
            'name': 'Get Sensor Configuration',
            'elements': [
                {
                    'name': 'Data Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Air Pressure Low Pass Filter',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2107: {
    'device_identifier': 2107,
    'name': 'CAN Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Write Frame Low Level',
            'elements': [
                {
                    'name': 'Frame Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Identifier',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Data',
                    'type': 'uint8',
                    'cardinality': '15',
                    'direction': 'in'
                },
                {
                    'name': 'Success',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I B 15B',
            'out_struct_format': '!',
        },
        2: {
            'function_id': 2,
            'name': 'Read Frame Low Level',
            'elements': [
                {
                    'name': 'Success',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Identifier',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Data Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Data Data',
                    'type': 'uint8',
                    'cardinality': '15',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! B I B 15B',
        },
        3: {
            'function_id': 3,
            'name': 'Set Frame Read Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Frame Read Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        5: {
            'function_id': 5,
            'name': 'Set Transceiver Configuration',
            'elements': [
                {
                    'name': 'Baud Rate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Sample Point',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Transceiver Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I H B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Transceiver Configuration',
            'elements': [
                {
                    'name': 'Baud Rate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Sample Point',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I H B',
        },
        7: {
            'function_id': 7,
            'name': 'Set Queue Configuration Low Level',
            'elements': [
                {
                    'name': 'Write Buffer Size',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Write Buffer Timeout',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Write Backlog Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Read Buffer Sizes Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Read Buffer Sizes Data',
                    'type': 'int8',
                    'cardinality': '32',
                    'direction': 'in'
                },
                {
                    'name': 'Read Backlog Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B i H B 32b H',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Queue Configuration Low Level',
            'elements': [
                {
                    'name': 'Write Buffer Size',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Write Buffer Timeout',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Write Backlog Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Read Buffer Sizes Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Read Buffer Sizes Data',
                    'type': 'int8',
                    'cardinality': '32',
                    'direction': 'out'
                },
                {
                    'name': 'Read Backlog Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B i H B 32b H',
        },
        9: {
            'function_id': 9,
            'name': 'Set Read Filter Configuration',
            'elements': [
                {
                    'name': 'Buffer Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Filter Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Filter Mask',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Filter Identifier',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B I I',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Read Filter Configuration',
            'elements': [
                {
                    'name': 'Buffer Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Filter Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Filter Mask',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Filter Identifier',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B I I',
        },
        11: {
            'function_id': 11,
            'name': 'Get Error Log Low Level',
            'elements': [
                {
                    'name': 'Transceiver State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver Write Error Level',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver Read Error Level',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver Stuffing Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver Format Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver ACK Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver Bit1 Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver Bit0 Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Transceiver CRC Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Write Buffer Timeout Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Read Buffer Overflow Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Read Buffer Overflow Error Occurred Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Read Buffer Overflow Error Occurred Data',
                    'type': 'bool',
                    'cardinality': '32',
                    'direction': 'out'
                },
                {
                    'name': 'Read Backlog Overflow Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B I I I I I I I I B 32! I',
        },
        12: {
            'function_id': 12,
            'name': 'Set Communication LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        13: {
            'function_id': 13,
            'name': 'Get Communication LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        14: {
            'function_id': 14,
            'name': 'Set Error LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        15: {
            'function_id': 15,
            'name': 'Get Error LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        16: {
            'function_id': 16,
            'name': 'Frame Read Low Level',
            'elements': [
                {
                    'name': 'Frame Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Identifier',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Data Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Data Data',
                    'type': 'uint8',
                    'cardinality': '15',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I B 15B',
        },
        17: {
            'function_id': 17,
            'name': 'Set Frame Readable Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        18: {
            'function_id': 18,
            'name': 'Get Frame Readable Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        19: {
            'function_id': 19,
            'name': 'Frame Readable',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        20: {
            'function_id': 20,
            'name': 'Set Error Occurred Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        21: {
            'function_id': 21,
            'name': 'Get Error Occurred Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        22: {
            'function_id': 22,
            'name': 'Error Occurred',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2147: {
    'device_identifier': 2147,
    'name': 'CO2 Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get All Values',
            'elements': [
                {
                    'name': 'CO2 Concentration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Humidity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H h H',
        },
        2: {
            'function_id': 2,
            'name': 'Set Air Pressure',
            'elements': [
                {
                    'name': 'Air Pressure',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Air Pressure',
            'elements': [
                {
                    'name': 'Air Pressure',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        4: {
            'function_id': 4,
            'name': 'Set Temperature Offset',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Temperature Offset',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        6: {
            'function_id': 6,
            'name': 'Set All Values Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get All Values Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        8: {
            'function_id': 8,
            'name': 'All Values',
            'elements': [
                {
                    'name': 'CO2 Concentration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Humidity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H h H',
        },
        9: {
            'function_id': 9,
            'name': 'Get CO2 Concentration',
            'elements': [
                {
                    'name': 'CO2 Concentration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        10: {
            'function_id': 10,
            'name': 'Set CO2 Concentration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get CO2 Concentration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        12: {
            'function_id': 12,
            'name': 'CO2 Concentration',
            'elements': [
                {
                    'name': 'CO2 Concentration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        13: {
            'function_id': 13,
            'name': 'Get Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        14: {
            'function_id': 14,
            'name': 'Set Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        15: {
            'function_id': 15,
            'name': 'Get Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        16: {
            'function_id': 16,
            'name': 'Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        17: {
            'function_id': 17,
            'name': 'Get Humidity',
            'elements': [
                {
                    'name': 'Humidity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        18: {
            'function_id': 18,
            'name': 'Set Humidity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        19: {
            'function_id': 19,
            'name': 'Get Humidity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        20: {
            'function_id': 20,
            'name': 'Humidity',
            'elements': [
                {
                    'name': 'Humidity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2128: {
    'device_identifier': 2128,
    'name': 'Color Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Color',
            'elements': [
                {
                    'name': 'R',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'G',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'B',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'C',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H H',
        },
        2: {
            'function_id': 2,
            'name': 'Set Color Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Color Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        4: {
            'function_id': 4,
            'name': 'Color',
            'elements': [
                {
                    'name': 'R',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'G',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'B',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'C',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H H',
        },
        5: {
            'function_id': 5,
            'name': 'Get Illuminance',
            'elements': [
                {
                    'name': 'Illuminance',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        6: {
            'function_id': 6,
            'name': 'Set Illuminance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c I I',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Illuminance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c I I',
        },
        8: {
            'function_id': 8,
            'name': 'Illuminance',
            'elements': [
                {
                    'name': 'Illuminance',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        9: {
            'function_id': 9,
            'name': 'Get Color Temperature',
            'elements': [
                {
                    'name': 'Color Temperature',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        10: {
            'function_id': 10,
            'name': 'Set Color Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Color Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        12: {
            'function_id': 12,
            'name': 'Color Temperature',
            'elements': [
                {
                    'name': 'Color Temperature',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        13: {
            'function_id': 13,
            'name': 'Set Light',
            'elements': [
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Light',
            'elements': [
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        15: {
            'function_id': 15,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Gain',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Integration Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Gain',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Integration Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2153: {
    'device_identifier': 2153,
    'name': 'Compass Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Heading',
            'elements': [
                {
                    'name': 'Heading',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        2: {
            'function_id': 2,
            'name': 'Set Heading Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Heading Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        4: {
            'function_id': 4,
            'name': 'Heading',
            'elements': [
                {
                    'name': 'Heading',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        5: {
            'function_id': 5,
            'name': 'Get Magnetic Flux Density',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i i',
        },
        6: {
            'function_id': 6,
            'name': 'Set Magnetic Flux Density Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Magnetic Flux Density Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        8: {
            'function_id': 8,
            'name': 'Magnetic Flux Density',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i i',
        },
        9: {
            'function_id': 9,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Data Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Background Calibration',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Data Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Background Calibration',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        11: {
            'function_id': 11,
            'name': 'Set Calibration',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'in'
                },
                {
                    'name': 'Gain',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '3h 3h',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Calibration',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Gain',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '3h 3h',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2125: {
    'device_identifier': 2125,
    'name': 'Distance IR Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Distance',
            'elements': [
                {
                    'name': 'Distance',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        2: {
            'function_id': 2,
            'name': 'Set Distance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Distance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        4: {
            'function_id': 4,
            'name': 'Distance',
            'elements': [
                {
                    'name': 'Distance',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        5: {
            'function_id': 5,
            'name': 'Get Analog Value',
            'elements': [
                {
                    'name': 'Analog Value',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        6: {
            'function_id': 6,
            'name': 'Set Analog Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c I I',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Analog Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c I I',
        },
        8: {
            'function_id': 8,
            'name': 'Analog Value',
            'elements': [
                {
                    'name': 'Analog Value',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        9: {
            'function_id': 9,
            'name': 'Set Moving Average Configuration',
            'elements': [
                {
                    'name': 'Moving Average Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Moving Average Configuration',
            'elements': [
                {
                    'name': 'Moving Average Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        11: {
            'function_id': 11,
            'name': 'Set Distance LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Distance LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        13: {
            'function_id': 13,
            'name': 'Set Sensor Type',
            'elements': [
                {
                    'name': 'Sensor',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Sensor Type',
            'elements': [
                {
                    'name': 'Sensor',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
299: {
    'device_identifier': 299,
    'name': 'Distance US Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Distance',
            'elements': [
                {
                    'name': 'Distance',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        2: {
            'function_id': 2,
            'name': 'Set Distance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Distance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        4: {
            'function_id': 4,
            'name': 'Distance',
            'elements': [
                {
                    'name': 'Distance',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        5: {
            'function_id': 5,
            'name': 'Set Update Rate',
            'elements': [
                {
                    'name': 'Update Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Update Rate',
            'elements': [
                {
                    'name': 'Update Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        7: {
            'function_id': 7,
            'name': 'Set Distance LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Distance LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
285: {
    'device_identifier': 285,
    'name': 'DMX Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set DMX Mode',
            'elements': [
                {
                    'name': 'DMX Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get DMX Mode',
            'elements': [
                {
                    'name': 'DMX Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        3: {
            'function_id': 3,
            'name': 'Write Frame Low Level',
            'elements': [
                {
                    'name': 'Frame Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frame Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frame Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H 60B',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Read Frame Low Level',
            'elements': [
                {
                    'name': 'Frame Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Chunk Data',
                    'type': 'uint8',
                    'cardinality': '56',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Number',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 56B I',
        },
        5: {
            'function_id': 5,
            'name': 'Set Frame Duration',
            'elements': [
                {
                    'name': 'Frame Duration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Frame Duration',
            'elements': [
                {
                    'name': 'Frame Duration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        7: {
            'function_id': 7,
            'name': 'Get Frame Error Count',
            'elements': [
                {
                    'name': 'Overrun Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Framing Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        8: {
            'function_id': 8,
            'name': 'Set Communication LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Communication LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        10: {
            'function_id': 10,
            'name': 'Set Error LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Error LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        12: {
            'function_id': 12,
            'name': 'Set Frame Callback Config',
            'elements': [
                {
                    'name': 'Frame Started Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frame Available Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frame Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frame Error Count Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '! ! ! !',
            'out_struct_format': '',
        },
        13: {
            'function_id': 13,
            'name': 'Get Frame Callback Config',
            'elements': [
                {
                    'name': 'Frame Started Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Available Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Error Count Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! ! ! !',
        },
        14: {
            'function_id': 14,
            'name': 'Frame Started',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        15: {
            'function_id': 15,
            'name': 'Frame Available',
            'elements': [
                {
                    'name': 'Frame Number',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        16: {
            'function_id': 16,
            'name': 'Frame Low Level',
            'elements': [
                {
                    'name': 'Frame Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Chunk Data',
                    'type': 'uint8',
                    'cardinality': '56',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Number',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 56B I',
        },
        17: {
            'function_id': 17,
            'name': 'Frame Error Count',
            'elements': [
                {
                    'name': 'Overrun Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Framing Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2119: {
    'device_identifier': 2119,
    'name': 'Dual Button Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set LED State',
            'elements': [
                {
                    'name': 'LED L',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'LED R',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get LED State',
            'elements': [
                {
                    'name': 'LED L',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'LED R',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        3: {
            'function_id': 3,
            'name': 'Get Button State',
            'elements': [
                {
                    'name': 'Button L',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Button R',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        4: {
            'function_id': 4,
            'name': 'State Changed',
            'elements': [
                {
                    'name': 'Button L',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Button R',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'LED L',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'LED R',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B B',
        },
        5: {
            'function_id': 5,
            'name': 'Set Selected LED State',
            'elements': [
                {
                    'name': 'LED',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Set State Changed Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get State Changed Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2146: {
    'device_identifier': 2146,
    'name': 'E-Paper 296x128 Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Draw',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Draw Status',
            'elements': [
                {
                    'name': 'Draw Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        3: {
            'function_id': 3,
            'name': 'Write Black White Low Level',
            'elements': [
                {
                    'name': 'X Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'X End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Chunk Data',
                    'type': 'bool',
                    'cardinality': '432',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B H B H H 432!',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Read Black White Low Level',
            'elements': [
                {
                    'name': 'X Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'X End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pixels Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pixels Chunk Data',
                    'type': 'bool',
                    'cardinality': '464',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'H B H B',
            'out_struct_format': 'H H 464!',
        },
        5: {
            'function_id': 5,
            'name': 'Write Color Low Level',
            'elements': [
                {
                    'name': 'X Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'X End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Chunk Data',
                    'type': 'bool',
                    'cardinality': '432',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B H B H H 432!',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Read Color Low Level',
            'elements': [
                {
                    'name': 'X Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'X End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pixels Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pixels Chunk Data',
                    'type': 'bool',
                    'cardinality': '464',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'H B H B',
            'out_struct_format': 'H H 464!',
        },
        7: {
            'function_id': 7,
            'name': 'Fill Display',
            'elements': [
                {
                    'name': 'Color',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Draw Text',
            'elements': [
                {
                    'name': 'Position X',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Font',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Color',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Orientation',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Text',
                    'type': 'string',
                    'cardinality': '50',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B B B B 50s',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Draw Line',
            'elements': [
                {
                    'name': 'Position X Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position X End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Color',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B H B B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Draw Box',
            'elements': [
                {
                    'name': 'Position X Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position X End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Fill',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Color',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B H B ! B',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Draw Status',
            'elements': [
                {
                    'name': 'Draw Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        12: {
            'function_id': 12,
            'name': 'Set Update Mode',
            'elements': [
                {
                    'name': 'Update Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        13: {
            'function_id': 13,
            'name': 'Get Update Mode',
            'elements': [
                {
                    'name': 'Update Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        14: {
            'function_id': 14,
            'name': 'Set Display Type',
            'elements': [
                {
                    'name': 'Display Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        15: {
            'function_id': 15,
            'name': 'Get Display Type',
            'elements': [
                {
                    'name': 'Display Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2152: {
    'device_identifier': 2152,
    'name': 'Energy Monitor Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Energy Data',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Energy',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Real Power',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Apparent Power',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Reactive Power',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Power Factor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i i i i i H H',
        },
        2: {
            'function_id': 2,
            'name': 'Reset Energy',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Waveform Low Level',
            'elements': [
                {
                    'name': 'Waveform Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Waveform Chunk Data',
                    'type': 'int16',
                    'cardinality': '30',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H 30h',
        },
        4: {
            'function_id': 4,
            'name': 'Get Transformer Status',
            'elements': [
                {
                    'name': 'Voltage Transformer Connected',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current Transformer Connected',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! !',
        },
        5: {
            'function_id': 5,
            'name': 'Set Transformer Calibration',
            'elements': [
                {
                    'name': 'Voltage Ratio',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Current Ratio',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Phase Shift',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H h',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Transformer Calibration',
            'elements': [
                {
                    'name': 'Voltage Ratio',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current Ratio',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Phase Shift',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H h',
        },
        7: {
            'function_id': 7,
            'name': 'Calibrate Offset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Set Energy Data Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Energy Data Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        10: {
            'function_id': 10,
            'name': 'Energy Data',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Energy',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Real Power',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Apparent Power',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Reactive Power',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Power Factor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i i i i i H H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
276: {
    'device_identifier': 276,
    'name': 'GPS Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Coordinates',
            'elements': [
                {
                    'name': 'Latitude',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'NS',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Longitude',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'EW',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I c I c',
        },
        2: {
            'function_id': 2,
            'name': 'Get Status',
            'elements': [
                {
                    'name': 'Has Fix',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Satellites View',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! B',
        },
        3: {
            'function_id': 3,
            'name': 'Get Altitude',
            'elements': [
                {
                    'name': 'Altitude',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Geoidal Separation',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i',
        },
        4: {
            'function_id': 4,
            'name': 'Get Motion',
            'elements': [
                {
                    'name': 'Course',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Speed',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        5: {
            'function_id': 5,
            'name': 'Get Date Time',
            'elements': [
                {
                    'name': 'Date',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        6: {
            'function_id': 6,
            'name': 'Restart',
            'elements': [
                {
                    'name': 'Restart Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Satellite System Status Low Level',
            'elements': [
                {
                    'name': 'Satellite System',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Satellite Numbers Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Satellite Numbers Data',
                    'type': 'uint8',
                    'cardinality': '12',
                    'direction': 'out'
                },
                {
                    'name': 'Fix',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'PDOP',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'HDOP',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'VDOP',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B 12B B H H H',
        },
        8: {
            'function_id': 8,
            'name': 'Get Satellite Status',
            'elements': [
                {
                    'name': 'Satellite System',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Satellite Number',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Elevation',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Azimuth',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'SNR',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': 'h h h',
        },
        9: {
            'function_id': 9,
            'name': 'Set Fix LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Fix LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        11: {
            'function_id': 11,
            'name': 'Set Coordinates Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Coordinates Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        13: {
            'function_id': 13,
            'name': 'Set Status Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Status Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        15: {
            'function_id': 15,
            'name': 'Set Altitude Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get Altitude Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        17: {
            'function_id': 17,
            'name': 'Set Motion Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        18: {
            'function_id': 18,
            'name': 'Get Motion Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        19: {
            'function_id': 19,
            'name': 'Set Date Time Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        20: {
            'function_id': 20,
            'name': 'Get Date Time Callback Period',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        21: {
            'function_id': 21,
            'name': 'Pulse Per Second',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        22: {
            'function_id': 22,
            'name': 'Coordinates',
            'elements': [
                {
                    'name': 'Latitude',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'NS',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Longitude',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'EW',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I c I c',
        },
        23: {
            'function_id': 23,
            'name': 'Status',
            'elements': [
                {
                    'name': 'Has Fix',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Satellites View',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! B',
        },
        24: {
            'function_id': 24,
            'name': 'Altitude',
            'elements': [
                {
                    'name': 'Altitude',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Geoidal Separation',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i i',
        },
        25: {
            'function_id': 25,
            'name': 'Motion',
            'elements': [
                {
                    'name': 'Course',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Speed',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        26: {
            'function_id': 26,
            'name': 'Date Time',
            'elements': [
                {
                    'name': 'Date',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        27: {
            'function_id': 27,
            'name': 'Set SBAS Config',
            'elements': [
                {
                    'name': 'SBAS Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        28: {
            'function_id': 28,
            'name': 'Get SBAS Config',
            'elements': [
                {
                    'name': 'SBAS Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2132: {
    'device_identifier': 2132,
    'name': 'Hall Effect Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Magnetic Flux Density',
            'elements': [
                {
                    'name': 'Magnetic Flux Density',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        2: {
            'function_id': 2,
            'name': 'Set Magnetic Flux Density Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Magnetic Flux Density Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        4: {
            'function_id': 4,
            'name': 'Magnetic Flux Density',
            'elements': [
                {
                    'name': 'Magnetic Flux Density',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        5: {
            'function_id': 5,
            'name': 'Get Counter',
            'elements': [
                {
                    'name': 'Reset Counter',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': 'I',
        },
        6: {
            'function_id': 6,
            'name': 'Set Counter Config',
            'elements': [
                {
                    'name': 'High Threshold',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Low Threshold',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Debounce',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'h h I',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Counter Config',
            'elements': [
                {
                    'name': 'High Threshold',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Low Threshold',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Debounce',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h I',
        },
        8: {
            'function_id': 8,
            'name': 'Set Counter Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Counter Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        10: {
            'function_id': 10,
            'name': 'Counter',
            'elements': [
                {
                    'name': 'Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
283: {
    'device_identifier': 283,
    'name': 'Humidity Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Humidity',
            'elements': [
                {
                    'name': 'Humidity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        2: {
            'function_id': 2,
            'name': 'Set Humidity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Humidity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        4: {
            'function_id': 4,
            'name': 'Humidity',
            'elements': [
                {
                    'name': 'Humidity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        5: {
            'function_id': 5,
            'name': 'Get Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        6: {
            'function_id': 6,
            'name': 'Set Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        8: {
            'function_id': 8,
            'name': 'Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        9: {
            'function_id': 9,
            'name': 'Set Heater Configuration',
            'elements': [
                {
                    'name': 'Heater Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Heater Configuration',
            'elements': [
                {
                    'name': 'Heater Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        11: {
            'function_id': 11,
            'name': 'Set Moving Average Configuration',
            'elements': [
                {
                    'name': 'Moving Average Length Humidity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Moving Average Length Temperature',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Moving Average Configuration',
            'elements': [
                {
                    'name': 'Moving Average Length Humidity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Moving Average Length Temperature',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        13: {
            'function_id': 13,
            'name': 'Set Samples Per Second',
            'elements': [
                {
                    'name': 'SPS',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Samples Per Second',
            'elements': [
                {
                    'name': 'SPS',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2161: {
    'device_identifier': 2161,
    'name': 'IMU Bricklet 3.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Acceleration',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        2: {
            'function_id': 2,
            'name': 'Get Magnetic Field',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        3: {
            'function_id': 3,
            'name': 'Get Angular Velocity',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        4: {
            'function_id': 4,
            'name': 'Get Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'b',
        },
        5: {
            'function_id': 5,
            'name': 'Get Orientation',
            'elements': [
                {
                    'name': 'Heading',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Roll',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pitch',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        6: {
            'function_id': 6,
            'name': 'Get Linear Acceleration',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        7: {
            'function_id': 7,
            'name': 'Get Gravity Vector',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        8: {
            'function_id': 8,
            'name': 'Get Quaternion',
            'elements': [
                {
                    'name': 'W',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h h',
        },
        9: {
            'function_id': 9,
            'name': 'Get All Data',
            'elements': [
                {
                    'name': 'Acceleration',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Magnetic Field',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Angular Velocity',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Euler Angle',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Quaternion',
                    'type': 'int16',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Linear Acceleration',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Gravity Vector',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Calibration Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '3h 3h 3h 3h 4h 3h 3h b B',
        },
        10: {
            'function_id': 10,
            'name': 'Save Calibration',
            'elements': [
                {
                    'name': 'Calibration Done',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        11: {
            'function_id': 11,
            'name': 'Set Sensor Configuration',
            'elements': [
                {
                    'name': 'Magnetometer Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Gyroscope Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Gyroscope Bandwidth',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Accelerometer Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Accelerometer Bandwidth',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B B',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Sensor Configuration',
            'elements': [
                {
                    'name': 'Magnetometer Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Gyroscope Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Gyroscope Bandwidth',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Accelerometer Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Accelerometer Bandwidth',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B B B',
        },
        13: {
            'function_id': 13,
            'name': 'Set Sensor Fusion Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Sensor Fusion Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        15: {
            'function_id': 15,
            'name': 'Set Acceleration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get Acceleration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        17: {
            'function_id': 17,
            'name': 'Set Magnetic Field Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        18: {
            'function_id': 18,
            'name': 'Get Magnetic Field Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        19: {
            'function_id': 19,
            'name': 'Set Angular Velocity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        20: {
            'function_id': 20,
            'name': 'Get Angular Velocity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        21: {
            'function_id': 21,
            'name': 'Set Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        22: {
            'function_id': 22,
            'name': 'Get Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        23: {
            'function_id': 23,
            'name': 'Set Orientation Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        24: {
            'function_id': 24,
            'name': 'Get Orientation Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        25: {
            'function_id': 25,
            'name': 'Set Linear Acceleration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        26: {
            'function_id': 26,
            'name': 'Get Linear Acceleration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        27: {
            'function_id': 27,
            'name': 'Set Gravity Vector Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        28: {
            'function_id': 28,
            'name': 'Get Gravity Vector Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        29: {
            'function_id': 29,
            'name': 'Set Quaternion Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        30: {
            'function_id': 30,
            'name': 'Get Quaternion Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        31: {
            'function_id': 31,
            'name': 'Set All Data Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        32: {
            'function_id': 32,
            'name': 'Get All Data Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        33: {
            'function_id': 33,
            'name': 'Acceleration',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        34: {
            'function_id': 34,
            'name': 'Magnetic Field',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        35: {
            'function_id': 35,
            'name': 'Angular Velocity',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        36: {
            'function_id': 36,
            'name': 'Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'b',
        },
        37: {
            'function_id': 37,
            'name': 'Linear Acceleration',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        38: {
            'function_id': 38,
            'name': 'Gravity Vector',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        39: {
            'function_id': 39,
            'name': 'Orientation',
            'elements': [
                {
                    'name': 'Heading',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Roll',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pitch',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h',
        },
        40: {
            'function_id': 40,
            'name': 'Quaternion',
            'elements': [
                {
                    'name': 'W',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Z',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h h h',
        },
        41: {
            'function_id': 41,
            'name': 'All Data',
            'elements': [
                {
                    'name': 'Acceleration',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Magnetic Field',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Angular Velocity',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Euler Angle',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Quaternion',
                    'type': 'int16',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Linear Acceleration',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Gravity Vector',
                    'type': 'int16',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Calibration Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '3h 3h 3h 3h 4h 3h 3h b B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2116: {
    'device_identifier': 2116,
    'name': 'Industrial Analog Out Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Enabled',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Enabled',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        3: {
            'function_id': 3,
            'name': 'Set Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        5: {
            'function_id': 5,
            'name': 'Set Current',
            'elements': [
                {
                    'name': 'Current',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Current',
            'elements': [
                {
                    'name': 'Current',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        7: {
            'function_id': 7,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Voltage Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Current Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Voltage Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current Range',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        9: {
            'function_id': 9,
            'name': 'Set Out LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Out LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        11: {
            'function_id': 11,
            'name': 'Set Out LED Status Config',
            'elements': [
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H B',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Out LED Status Config',
            'elements': [
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
293: {
    'device_identifier': 293,
    'name': 'Industrial Counter Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Counter',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Counter',
                    'type': 'int64',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'q',
        },
        2: {
            'function_id': 2,
            'name': 'Get All Counter',
            'elements': [
                {
                    'name': 'Counter',
                    'type': 'int64',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4q',
        },
        3: {
            'function_id': 3,
            'name': 'Set Counter',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Counter',
                    'type': 'int64',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B q',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Set All Counter',
            'elements': [
                {
                    'name': 'Counter',
                    'type': 'int64',
                    'cardinality': '4',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '4q',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Signal Data',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Duty Cycle',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Period',
                    'type': 'uint64',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'H Q I !',
        },
        6: {
            'function_id': 6,
            'name': 'Get All Signal Data',
            'elements': [
                {
                    'name': 'Duty Cycle',
                    'type': 'uint16',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Period',
                    'type': 'uint64',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4H 4Q 4I 4!',
        },
        7: {
            'function_id': 7,
            'name': 'Set Counter Active',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Set All Counter Active',
            'elements': [
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '4!',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Counter Active',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '!',
        },
        10: {
            'function_id': 10,
            'name': 'Get All Counter Active',
            'elements': [
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4!',
        },
        11: {
            'function_id': 11,
            'name': 'Set Counter Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count Edge',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count Direction',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Duty Cycle Prescaler',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frequency Integration Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B B',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Counter Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count Edge',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Count Direction',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duty Cycle Prescaler',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frequency Integration Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B B B B',
        },
        13: {
            'function_id': 13,
            'name': 'Set All Counter Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get All Counter Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        15: {
            'function_id': 15,
            'name': 'Set All Signal Data Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get All Signal Data Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        17: {
            'function_id': 17,
            'name': 'Set Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        18: {
            'function_id': 18,
            'name': 'Get Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        19: {
            'function_id': 19,
            'name': 'All Counter',
            'elements': [
                {
                    'name': 'Counter',
                    'type': 'int64',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4q',
        },
        20: {
            'function_id': 20,
            'name': 'All Signal Data',
            'elements': [
                {
                    'name': 'Duty Cycle',
                    'type': 'uint16',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Period',
                    'type': 'uint64',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4H 4Q 4I 4!',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2100: {
    'device_identifier': 2100,
    'name': 'Industrial Digital In 4 Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4!',
        },
        2: {
            'function_id': 2,
            'name': 'Set Value Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B I !',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Value Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'I !',
        },
        4: {
            'function_id': 4,
            'name': 'Set All Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get All Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        6: {
            'function_id': 6,
            'name': 'Get Edge Count',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Reset Counter',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': 'I',
        },
        7: {
            'function_id': 7,
            'name': 'Set Edge Count Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Edge Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Debounce',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Edge Count Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Edge Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Debounce',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B B',
        },
        9: {
            'function_id': 9,
            'name': 'Set Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        11: {
            'function_id': 11,
            'name': 'Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Changed',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B ! !',
        },
        12: {
            'function_id': 12,
            'name': 'All Value',
            'elements': [
                {
                    'name': 'Changed',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4! 4!',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2124: {
    'device_identifier': 2124,
    'name': 'Industrial Digital Out 4 Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '4!',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4!',
        },
        3: {
            'function_id': 3,
            'name': 'Set Selected Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Set Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B ! I',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! I I',
        },
        6: {
            'function_id': 6,
            'name': 'Monoflop Done',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        7: {
            'function_id': 7,
            'name': 'Set Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        9: {
            'function_id': 9,
            'name': 'Set PWM Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Duty Cycle',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B I H',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get PWM Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duty Cycle',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'I H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2120: {
    'device_identifier': 2120,
    'name': 'Industrial Dual 0-20mA Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Current',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Current',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Current Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Current Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'Current',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B i',
        },
        5: {
            'function_id': 5,
            'name': 'Set Sample Rate',
            'elements': [
                {
                    'name': 'Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Sample Rate',
            'elements': [
                {
                    'name': 'Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        7: {
            'function_id': 7,
            'name': 'Set Gain',
            'elements': [
                {
                    'name': 'Gain',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Gain',
            'elements': [
                {
                    'name': 'Gain',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        9: {
            'function_id': 9,
            'name': 'Set Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        11: {
            'function_id': 11,
            'name': 'Set Channel LED Status Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B i i B',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Channel LED Status Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'i i B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2162: {
    'device_identifier': 2162,
    'name': 'Industrial Dual AC Relay Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Value',
            'elements': [
                {
                    'name': 'Channel0',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Channel1',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '! !',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Value',
            'elements': [
                {
                    'name': 'Channel0',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Channel1',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! !',
        },
        3: {
            'function_id': 3,
            'name': 'Set Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        5: {
            'function_id': 5,
            'name': 'Set Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B ! I',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! I I',
        },
        7: {
            'function_id': 7,
            'name': 'Monoflop Done',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        8: {
            'function_id': 8,
            'name': 'Set Selected Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2121: {
    'device_identifier': 2121,
    'name': 'Industrial Dual Analog In Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Voltage',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Voltage',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Voltage Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Voltage Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'Voltage',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Voltage',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B i',
        },
        5: {
            'function_id': 5,
            'name': 'Set Sample Rate',
            'elements': [
                {
                    'name': 'Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Sample Rate',
            'elements': [
                {
                    'name': 'Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        7: {
            'function_id': 7,
            'name': 'Set Calibration',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int32',
                    'cardinality': '2',
                    'direction': 'in'
                },
                {
                    'name': 'Gain',
                    'type': 'int32',
                    'cardinality': '2',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '2i 2i',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Calibration',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int32',
                    'cardinality': '2',
                    'direction': 'out'
                },
                {
                    'name': 'Gain',
                    'type': 'int32',
                    'cardinality': '2',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '2i 2i',
        },
        9: {
            'function_id': 9,
            'name': 'Get ADC Values',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'int32',
                    'cardinality': '2',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '2i',
        },
        10: {
            'function_id': 10,
            'name': 'Set Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        12: {
            'function_id': 12,
            'name': 'Set Channel LED Status Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B i i B',
            'out_struct_format': '',
        },
        13: {
            'function_id': 13,
            'name': 'Get Channel LED Status Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'i i B',
        },
        14: {
            'function_id': 14,
            'name': 'Get All Voltages',
            'elements': [
                {
                    'name': 'Voltages',
                    'type': 'int32',
                    'cardinality': '2',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '2i',
        },
        15: {
            'function_id': 15,
            'name': 'Set All Voltages Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get All Voltages Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        17: {
            'function_id': 17,
            'name': 'All Voltages',
            'elements': [
                {
                    'name': 'Voltages',
                    'type': 'int32',
                    'cardinality': '2',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '2i',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
284: {
    'device_identifier': 284,
    'name': 'Industrial Dual Relay Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Value',
            'elements': [
                {
                    'name': 'Channel0',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Channel1',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '! !',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Value',
            'elements': [
                {
                    'name': 'Channel0',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Channel1',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! !',
        },
        3: {
            'function_id': 3,
            'name': 'Set Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B ! I',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! I I',
        },
        5: {
            'function_id': 5,
            'name': 'Monoflop Done',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        6: {
            'function_id': 6,
            'name': 'Set Selected Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2102: {
    'device_identifier': 2102,
    'name': 'Industrial Quad Relay Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '4!',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4!',
        },
        3: {
            'function_id': 3,
            'name': 'Set Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B ! I',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! I I',
        },
        5: {
            'function_id': 5,
            'name': 'Set Selected Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Set Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Channel LED Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        8: {
            'function_id': 8,
            'name': 'Monoflop Done',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2114: {
    'device_identifier': 2114,
    'name': 'IO-16 Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '16',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '16!',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '16',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '16!',
        },
        3: {
            'function_id': 3,
            'name': 'Set Selected Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Direction',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B c !',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Direction',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'c !',
        },
        6: {
            'function_id': 6,
            'name': 'Set Input Value Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B I !',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Input Value Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'I !',
        },
        8: {
            'function_id': 8,
            'name': 'Set All Input Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get All Input Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        10: {
            'function_id': 10,
            'name': 'Set Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B ! I',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! I I',
        },
        12: {
            'function_id': 12,
            'name': 'Get Edge Count',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Reset Counter',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': 'I',
        },
        13: {
            'function_id': 13,
            'name': 'Set Edge Count Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Edge Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Debounce',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Edge Count Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Edge Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Debounce',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B B',
        },
        15: {
            'function_id': 15,
            'name': 'Input Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Changed',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B ! !',
        },
        16: {
            'function_id': 16,
            'name': 'All Input Value',
            'elements': [
                {
                    'name': 'Changed',
                    'type': 'bool',
                    'cardinality': '16',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '16',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '16! 16!',
        },
        17: {
            'function_id': 17,
            'name': 'Monoflop Done',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2111: {
    'device_identifier': 2111,
    'name': 'IO-4 Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '4!',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4!',
        },
        3: {
            'function_id': 3,
            'name': 'Set Selected Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Direction',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B c !',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Direction',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'c !',
        },
        6: {
            'function_id': 6,
            'name': 'Set Input Value Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B I !',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Input Value Callback Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'I !',
        },
        8: {
            'function_id': 8,
            'name': 'Set All Input Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get All Input Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        10: {
            'function_id': 10,
            'name': 'Set Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B ! I',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Monoflop',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! I I',
        },
        12: {
            'function_id': 12,
            'name': 'Get Edge Count',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Reset Counter',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': 'I',
        },
        13: {
            'function_id': 13,
            'name': 'Set Edge Count Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Edge Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Debounce',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Edge Count Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Edge Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Debounce',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B B',
        },
        15: {
            'function_id': 15,
            'name': 'Set PWM Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Duty Cycle',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B I H',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get PWM Configuration',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duty Cycle',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'I H',
        },
        17: {
            'function_id': 17,
            'name': 'Input Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Changed',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B ! !',
        },
        18: {
            'function_id': 18,
            'name': 'All Input Value',
            'elements': [
                {
                    'name': 'Changed',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4! 4!',
        },
        19: {
            'function_id': 19,
            'name': 'Monoflop Done',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2122: {
    'device_identifier': 2122,
    'name': 'Isolator Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Statistics',
            'elements': [
                {
                    'name': 'Messages From Brick',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Messages From Bricklet',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Bricklet Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Bricklet UID',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I H 8s',
        },
        2: {
            'function_id': 2,
            'name': 'Set SPITFP Baudrate Config',
            'elements': [
                {
                    'name': 'Enable Dynamic Baudrate',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Minimum Dynamic Baudrate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '! I',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get SPITFP Baudrate Config',
            'elements': [
                {
                    'name': 'Enable Dynamic Baudrate',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Minimum Dynamic Baudrate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! I',
        },
        4: {
            'function_id': 4,
            'name': 'Set SPITFP Baudrate',
            'elements': [
                {
                    'name': 'Baudrate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get SPITFP Baudrate',
            'elements': [
                {
                    'name': 'Baudrate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        6: {
            'function_id': 6,
            'name': 'Get Isolator SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count ACK Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        7: {
            'function_id': 7,
            'name': 'Set Statistics Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Statistics Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        9: {
            'function_id': 9,
            'name': 'Statistics',
            'elements': [
                {
                    'name': 'Messages From Brick',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Messages From Bricklet',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Bricklet Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Bricklet UID',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I H 8s',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2138: {
    'device_identifier': 2138,
    'name': 'Joystick Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Position',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h',
        },
        2: {
            'function_id': 2,
            'name': 'Is Pressed',
            'elements': [
                {
                    'name': 'Pressed',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        3: {
            'function_id': 3,
            'name': 'Calibrate',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Set Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        6: {
            'function_id': 6,
            'name': 'Position',
            'elements': [
                {
                    'name': 'X',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h h',
        },
        7: {
            'function_id': 7,
            'name': 'Set Pressed Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Pressed Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        9: {
            'function_id': 9,
            'name': 'Pressed',
            'elements': [
                {
                    'name': 'Pressed',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2144: {
    'device_identifier': 2144,
    'name': 'Laser Range Finder Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Distance',
            'elements': [
                {
                    'name': 'Distance',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        2: {
            'function_id': 2,
            'name': 'Set Distance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Distance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        4: {
            'function_id': 4,
            'name': 'Distance',
            'elements': [
                {
                    'name': 'Distance',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        5: {
            'function_id': 5,
            'name': 'Get Velocity',
            'elements': [
                {
                    'name': 'Velocity',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        6: {
            'function_id': 6,
            'name': 'Set Velocity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Velocity Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        8: {
            'function_id': 8,
            'name': 'Velocity',
            'elements': [
                {
                    'name': 'Velocity',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        9: {
            'function_id': 9,
            'name': 'Set Enable',
            'elements': [
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Enable',
            'elements': [
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        11: {
            'function_id': 11,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Acquisition Count',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Enable Quick Termination',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Threshold Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Measurement Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B ! B H',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Acquisition Count',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enable Quick Termination',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Threshold Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Measurement Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B ! B H',
        },
        13: {
            'function_id': 13,
            'name': 'Set Moving Average',
            'elements': [
                {
                    'name': 'Distance Average Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Velocity Average Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Moving Average',
            'elements': [
                {
                    'name': 'Distance Average Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Velocity Average Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        15: {
            'function_id': 15,
            'name': 'Set Offset Calibration',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'h',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get Offset Calibration',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        17: {
            'function_id': 17,
            'name': 'Set Distance LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        18: {
            'function_id': 18,
            'name': 'Get Distance LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
298: {
    'device_identifier': 298,
    'name': 'LCD 128x64 Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Write Pixels Low Level',
            'elements': [
                {
                    'name': 'X Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'X End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Chunk Data',
                    'type': 'bool',
                    'cardinality': '448',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B H H 448!',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Read Pixels Low Level',
            'elements': [
                {
                    'name': 'X Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'X End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pixels Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pixels Chunk Data',
                    'type': 'bool',
                    'cardinality': '480',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B B B B',
            'out_struct_format': 'H H 480!',
        },
        3: {
            'function_id': 3,
            'name': 'Clear Display',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Set Display Configuration',
            'elements': [
                {
                    'name': 'Contrast',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Backlight',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Invert',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Automatic Draw',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B ! !',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Display Configuration',
            'elements': [
                {
                    'name': 'Contrast',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Backlight',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Invert',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Automatic Draw',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B ! !',
        },
        6: {
            'function_id': 6,
            'name': 'Write Line',
            'elements': [
                {
                    'name': 'Line',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Text',
                    'type': 'string',
                    'cardinality': '22',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B 22s',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Draw Buffered Frame',
            'elements': [
                {
                    'name': 'Force Complete Redraw',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Touch Position',
            'elements': [
                {
                    'name': 'Pressure',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'X',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Age',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H I',
        },
        9: {
            'function_id': 9,
            'name': 'Set Touch Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Touch Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        11: {
            'function_id': 11,
            'name': 'Touch Position',
            'elements': [
                {
                    'name': 'Pressure',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'X',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Age',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H I',
        },
        12: {
            'function_id': 12,
            'name': 'Get Touch Gesture',
            'elements': [
                {
                    'name': 'Gesture',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duration',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pressure Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'X Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'X End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Age',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H H H H H I',
        },
        13: {
            'function_id': 13,
            'name': 'Set Touch Gesture Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Touch Gesture Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        15: {
            'function_id': 15,
            'name': 'Touch Gesture',
            'elements': [
                {
                    'name': 'Gesture',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duration',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pressure Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'X Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'X End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Y End',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Age',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H H H H H I',
        },
        16: {
            'function_id': 16,
            'name': 'Draw Line',
            'elements': [
                {
                    'name': 'Position X Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position X End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Color',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B !',
            'out_struct_format': '',
        },
        17: {
            'function_id': 17,
            'name': 'Draw Box',
            'elements': [
                {
                    'name': 'Position X Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position X End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Fill',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Color',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B ! !',
            'out_struct_format': '',
        },
        18: {
            'function_id': 18,
            'name': 'Draw Text',
            'elements': [
                {
                    'name': 'Position X',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Font',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Color',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Text',
                    'type': 'string',
                    'cardinality': '22',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B ! 22s',
            'out_struct_format': '',
        },
        19: {
            'function_id': 19,
            'name': 'Set GUI Button',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position X',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Width',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Height',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Text',
                    'type': 'string',
                    'cardinality': '16',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B B 16s',
            'out_struct_format': '',
        },
        20: {
            'function_id': 20,
            'name': 'Get GUI Button',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Position X',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Position Y',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Width',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Height',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Text',
                    'type': 'string',
                    'cardinality': '16',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! B B B B 16s',
        },
        21: {
            'function_id': 21,
            'name': 'Remove GUI Button',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        22: {
            'function_id': 22,
            'name': 'Set GUI Button Pressed Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        23: {
            'function_id': 23,
            'name': 'Get GUI Button Pressed Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        24: {
            'function_id': 24,
            'name': 'Get GUI Button Pressed',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pressed',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '!',
        },
        25: {
            'function_id': 25,
            'name': 'GUI Button Pressed',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pressed',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        26: {
            'function_id': 26,
            'name': 'Set GUI Slider',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position X',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Direction',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B B B',
            'out_struct_format': '',
        },
        27: {
            'function_id': 27,
            'name': 'Get GUI Slider',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Position X',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Position Y',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Direction',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! B B B B B',
        },
        28: {
            'function_id': 28,
            'name': 'Remove GUI Slider',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        29: {
            'function_id': 29,
            'name': 'Set GUI Slider Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        30: {
            'function_id': 30,
            'name': 'Get GUI Slider Value Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        31: {
            'function_id': 31,
            'name': 'Get GUI Slider Value',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        32: {
            'function_id': 32,
            'name': 'GUI Slider Value',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        33: {
            'function_id': 33,
            'name': 'Set GUI Tab Configuration',
            'elements': [
                {
                    'name': 'Change Tab Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Clear GUI',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        34: {
            'function_id': 34,
            'name': 'Get GUI Tab Configuration',
            'elements': [
                {
                    'name': 'Change Tab Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Clear GUI',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        35: {
            'function_id': 35,
            'name': 'Set GUI Tab Text',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Text',
                    'type': 'string',
                    'cardinality': '5',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B 5s',
            'out_struct_format': '',
        },
        36: {
            'function_id': 36,
            'name': 'Get GUI Tab Text',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Text',
                    'type': 'string',
                    'cardinality': '5',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! 5s',
        },
        37: {
            'function_id': 37,
            'name': 'Set GUI Tab Icon',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Icon',
                    'type': 'bool',
                    'cardinality': '168',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B 168!',
            'out_struct_format': '',
        },
        38: {
            'function_id': 38,
            'name': 'Get GUI Tab Icon',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Icon',
                    'type': 'bool',
                    'cardinality': '168',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! 168!',
        },
        39: {
            'function_id': 39,
            'name': 'Remove GUI Tab',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        40: {
            'function_id': 40,
            'name': 'Set GUI Tab Selected',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        41: {
            'function_id': 41,
            'name': 'Set GUI Tab Selected Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        42: {
            'function_id': 42,
            'name': 'Get GUI Tab Selected Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        43: {
            'function_id': 43,
            'name': 'Get GUI Tab Selected',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'b',
        },
        44: {
            'function_id': 44,
            'name': 'GUI Tab Selected',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'b',
        },
        45: {
            'function_id': 45,
            'name': 'Set GUI Graph Configuration',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Graph Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position X',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position Y',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Width',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Height',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Text X',
                    'type': 'string',
                    'cardinality': '4',
                    'direction': 'in'
                },
                {
                    'name': 'Text Y',
                    'type': 'string',
                    'cardinality': '4',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B B B 4s 4s',
            'out_struct_format': '',
        },
        46: {
            'function_id': 46,
            'name': 'Get GUI Graph Configuration',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Active',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Graph Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Position X',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Position Y',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Width',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Height',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Text X',
                    'type': 'string',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Text Y',
                    'type': 'string',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '! B B B B B 4s 4s',
        },
        47: {
            'function_id': 47,
            'name': 'Set GUI Graph Data Low Level',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Chunk Data',
                    'type': 'uint8',
                    'cardinality': '59',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B H H 59B',
            'out_struct_format': '',
        },
        48: {
            'function_id': 48,
            'name': 'Get GUI Graph Data Low Level',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Data Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Data Chunk Data',
                    'type': 'uint8',
                    'cardinality': '59',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'H H 59B',
        },
        49: {
            'function_id': 49,
            'name': 'Remove GUI Graph',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        50: {
            'function_id': 50,
            'name': 'Remove All GUI',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        51: {
            'function_id': 51,
            'name': 'Set Touch LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        52: {
            'function_id': 52,
            'name': 'Get Touch LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2103: {
    'device_identifier': 2103,
    'name': 'LED Strip Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set LED Values Low Level',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Chunk Data',
                    'type': 'uint8',
                    'cardinality': '58',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H H 58B',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get LED Values Low Level',
            'elements': [
                {
                    'name': 'Index',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'H H',
            'out_struct_format': 'H H 60B',
        },
        3: {
            'function_id': 3,
            'name': 'Set Frame Duration',
            'elements': [
                {
                    'name': 'Duration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Frame Duration',
            'elements': [
                {
                    'name': 'Duration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        5: {
            'function_id': 5,
            'name': 'Get Supply Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        6: {
            'function_id': 6,
            'name': 'Frame Started',
            'elements': [
                {
                    'name': 'Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        7: {
            'function_id': 7,
            'name': 'Set Clock Frequency',
            'elements': [
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Clock Frequency',
            'elements': [
                {
                    'name': 'Frequency',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        9: {
            'function_id': 9,
            'name': 'Set Chip Type',
            'elements': [
                {
                    'name': 'Chip',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Chip Type',
            'elements': [
                {
                    'name': 'Chip',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        11: {
            'function_id': 11,
            'name': 'Set Channel Mapping',
            'elements': [
                {
                    'name': 'Mapping',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Channel Mapping',
            'elements': [
                {
                    'name': 'Mapping',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        13: {
            'function_id': 13,
            'name': 'Set Frame Started Callback Configuration',
            'elements': [
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Frame Started Callback Configuration',
            'elements': [
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2139: {
    'device_identifier': 2139,
    'name': 'Linear Poti Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Position',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        2: {
            'function_id': 2,
            'name': 'Set Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c B B',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c B B',
        },
        4: {
            'function_id': 4,
            'name': 'Position',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2104: {
    'device_identifier': 2104,
    'name': 'Load Cell Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Weight',
            'elements': [
                {
                    'name': 'Weight',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Weight Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Weight Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'Weight',
            'elements': [
                {
                    'name': 'Weight',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        5: {
            'function_id': 5,
            'name': 'Set Moving Average',
            'elements': [
                {
                    'name': 'Average',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Moving Average',
            'elements': [
                {
                    'name': 'Average',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        7: {
            'function_id': 7,
            'name': 'Set Info LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Info LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        9: {
            'function_id': 9,
            'name': 'Calibrate',
            'elements': [
                {
                    'name': 'Weight',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Tare',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Gain',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Rate',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Gain',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
292: {
    'device_identifier': 292,
    'name': 'Motion Detector Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Motion Detected',
            'elements': [
                {
                    'name': 'Motion',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        2: {
            'function_id': 2,
            'name': 'Set Sensitivity',
            'elements': [
                {
                    'name': 'Sensitivity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Sensitivity',
            'elements': [
                {
                    'name': 'Sensitivity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        4: {
            'function_id': 4,
            'name': 'Set Indicator',
            'elements': [
                {
                    'name': 'Top Left',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Top Right',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Bottom',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Indicator',
            'elements': [
                {
                    'name': 'Top Left',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Top Right',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Bottom',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B',
        },
        6: {
            'function_id': 6,
            'name': 'Motion Detected',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Detection Cycle Ended',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
267: {
    'device_identifier': 267,
    'name': 'Motorized Linear Poti Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Position',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        2: {
            'function_id': 2,
            'name': 'Set Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        4: {
            'function_id': 4,
            'name': 'Position',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        5: {
            'function_id': 5,
            'name': 'Set Motor Position',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Drive Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Hold Position',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B !',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Motor Position',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Drive Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hold Position',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Position Reached',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H B ! !',
        },
        7: {
            'function_id': 7,
            'name': 'Calibrate',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Set Position Reached Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Position Reached Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        10: {
            'function_id': 10,
            'name': 'Position Reached',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2129: {
    'device_identifier': 2129,
    'name': 'Multi Touch Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Touch State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'bool',
                    'cardinality': '13',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '13!',
        },
        2: {
            'function_id': 2,
            'name': 'Set Touch State Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Touch State Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        4: {
            'function_id': 4,
            'name': 'Touch State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'bool',
                    'cardinality': '13',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '13!',
        },
        5: {
            'function_id': 5,
            'name': 'Recalibrate',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Set Electrode Config',
            'elements': [
                {
                    'name': 'Enabled Electrodes',
                    'type': 'bool',
                    'cardinality': '13',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '13!',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Electrode Config',
            'elements': [
                {
                    'name': 'Enabled Electrodes',
                    'type': 'bool',
                    'cardinality': '13',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '13!',
        },
        8: {
            'function_id': 8,
            'name': 'Set Electrode Sensitivity',
            'elements': [
                {
                    'name': 'Sensitivity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Electrode Sensitivity',
            'elements': [
                {
                    'name': 'Sensitivity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        10: {
            'function_id': 10,
            'name': 'Set Touch LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Touch LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
286: {
    'device_identifier': 286,
    'name': 'NFC Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        3: {
            'function_id': 3,
            'name': 'Reader Request Tag ID',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Reader Get Tag ID Low Level',
            'elements': [
                {
                    'name': 'Tag Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Tag ID Length',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Tag ID Data',
                    'type': 'uint8',
                    'cardinality': '32',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B 32B',
        },
        5: {
            'function_id': 5,
            'name': 'Reader Get State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Idle',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        6: {
            'function_id': 6,
            'name': 'Reader Write NDEF Low Level',
            'elements': [
                {
                    'name': 'NDEF Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'NDEF Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'NDEF Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H 60B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Reader Request NDEF',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Reader Read NDEF Low Level',
            'elements': [
                {
                    'name': 'NDEF Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'NDEF Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'NDEF Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 60B',
        },
        9: {
            'function_id': 9,
            'name': 'Reader Authenticate Mifare Classic Page',
            'elements': [
                {
                    'name': 'Page',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Key Number',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Key',
                    'type': 'uint8',
                    'cardinality': '6',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B 6B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Reader Write Page Low Level',
            'elements': [
                {
                    'name': 'Page',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Data Chunk Data',
                    'type': 'uint8',
                    'cardinality': '58',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H H 58B',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Reader Request Page',
            'elements': [
                {
                    'name': 'Page',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Reader Read Page Low Level',
            'elements': [
                {
                    'name': 'Data Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Data Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Data Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 60B',
        },
        13: {
            'function_id': 13,
            'name': 'Reader State Changed',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Idle',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        14: {
            'function_id': 14,
            'name': 'Cardemu Get State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Idle',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        15: {
            'function_id': 15,
            'name': 'Cardemu Start Discovery',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Cardemu Write NDEF Low Level',
            'elements': [
                {
                    'name': 'NDEF Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'NDEF Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'NDEF Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H 60B',
            'out_struct_format': '',
        },
        17: {
            'function_id': 17,
            'name': 'Cardemu Start Transfer',
            'elements': [
                {
                    'name': 'Transfer',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        18: {
            'function_id': 18,
            'name': 'Cardemu State Changed',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Idle',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        19: {
            'function_id': 19,
            'name': 'P2P Get State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Idle',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        20: {
            'function_id': 20,
            'name': 'P2P Start Discovery',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        21: {
            'function_id': 21,
            'name': 'P2P Write NDEF Low Level',
            'elements': [
                {
                    'name': 'NDEF Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'NDEF Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'NDEF Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H 60B',
            'out_struct_format': '',
        },
        22: {
            'function_id': 22,
            'name': 'P2P Start Transfer',
            'elements': [
                {
                    'name': 'Transfer',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        23: {
            'function_id': 23,
            'name': 'P2P Read NDEF Low Level',
            'elements': [
                {
                    'name': 'NDEF Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'NDEF Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'NDEF Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 60B',
        },
        24: {
            'function_id': 24,
            'name': 'P2P State Changed',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Idle',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B !',
        },
        25: {
            'function_id': 25,
            'name': 'Set Detection LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        26: {
            'function_id': 26,
            'name': 'Get Detection LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        27: {
            'function_id': 27,
            'name': 'Set Maximum Timeout',
            'elements': [
                {
                    'name': 'Timeout',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        28: {
            'function_id': 28,
            'name': 'Get Maximum Timeout',
            'elements': [
                {
                    'name': 'Timeout',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2112: {
    'device_identifier': 2112,
    'name': 'OLED 128x64 Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Write Pixels Low Level',
            'elements': [
                {
                    'name': 'X Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'X End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Chunk Data',
                    'type': 'bool',
                    'cardinality': '448',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B H H 448!',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Read Pixels Low Level',
            'elements': [
                {
                    'name': 'X Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y Start',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'X End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Y End',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pixels Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pixels Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Pixels Chunk Data',
                    'type': 'bool',
                    'cardinality': '480',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B B B B',
            'out_struct_format': 'H H 480!',
        },
        3: {
            'function_id': 3,
            'name': 'Clear Display',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Set Display Configuration',
            'elements': [
                {
                    'name': 'Contrast',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Invert',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Automatic Draw',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B ! !',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Display Configuration',
            'elements': [
                {
                    'name': 'Contrast',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Invert',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Automatic Draw',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B ! !',
        },
        6: {
            'function_id': 6,
            'name': 'Write Line',
            'elements': [
                {
                    'name': 'Line',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Position',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Text',
                    'type': 'string',
                    'cardinality': '22',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B 22s',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Draw Buffered Frame',
            'elements': [
                {
                    'name': 'Force Complete Redraw',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2123: {
    'device_identifier': 2123,
    'name': 'One Wire Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Search Bus Low Level',
            'elements': [
                {
                    'name': 'Identifier Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Identifier Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Identifier Chunk Data',
                    'type': 'uint64',
                    'cardinality': '7',
                    'direction': 'out'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 7Q B',
        },
        2: {
            'function_id': 2,
            'name': 'Reset Bus',
            'elements': [
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        3: {
            'function_id': 3,
            'name': 'Write',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        4: {
            'function_id': 4,
            'name': 'Read',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        5: {
            'function_id': 5,
            'name': 'Write Command',
            'elements': [
                {
                    'name': 'Identifier',
                    'type': 'uint64',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Command',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'Q B',
            'out_struct_format': 'B',
        },
        6: {
            'function_id': 6,
            'name': 'Set Communication LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Communication LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
288: {
    'device_identifier': 288,
    'name': 'Outdoor Weather Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Station Identifiers Low Level',
            'elements': [
                {
                    'name': 'Identifiers Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Identifiers Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Identifiers Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 60B',
        },
        2: {
            'function_id': 2,
            'name': 'Get Sensor Identifiers Low Level',
            'elements': [
                {
                    'name': 'Identifiers Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Identifiers Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Identifiers Chunk Data',
                    'type': 'uint8',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 60B',
        },
        3: {
            'function_id': 3,
            'name': 'Get Station Data',
            'elements': [
                {
                    'name': 'Identifier',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Humidity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Wind Speed',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Gust Speed',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Rain',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Wind Direction',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Battery Low',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Last Change',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'h B I I I B ! H',
        },
        4: {
            'function_id': 4,
            'name': 'Get Sensor Data',
            'elements': [
                {
                    'name': 'Identifier',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Humidity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Last Change',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'h B H',
        },
        5: {
            'function_id': 5,
            'name': 'Set Station Callback Configuration',
            'elements': [
                {
                    'name': 'Enable Callback',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Station Callback Configuration',
            'elements': [
                {
                    'name': 'Enable Callback',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        7: {
            'function_id': 7,
            'name': 'Set Sensor Callback Configuration',
            'elements': [
                {
                    'name': 'Enable Callback',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Sensor Callback Configuration',
            'elements': [
                {
                    'name': 'Enable Callback',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        9: {
            'function_id': 9,
            'name': 'Station Data',
            'elements': [
                {
                    'name': 'Identifier',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Humidity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Wind Speed',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Gust Speed',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Rain',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Wind Direction',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Battery Low',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B h B I I I B !',
        },
        10: {
            'function_id': 10,
            'name': 'Sensor Data',
            'elements': [
                {
                    'name': 'Identifier',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Humidity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B h B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2110: {
    'device_identifier': 2110,
    'name': 'Particulate Matter Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get PM Concentration',
            'elements': [
                {
                    'name': 'PM10',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'PM25',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'PM100',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H',
        },
        2: {
            'function_id': 2,
            'name': 'Get PM Count',
            'elements': [
                {
                    'name': 'Greater03um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater05um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater10um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater25um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater50um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater100um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H H H H',
        },
        3: {
            'function_id': 3,
            'name': 'Set Enable',
            'elements': [
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Enable',
            'elements': [
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        5: {
            'function_id': 5,
            'name': 'Get Sensor Info',
            'elements': [
                {
                    'name': 'Sensor Version',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Last Error Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Framing Error Count',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Checksum Error Count',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B B',
        },
        6: {
            'function_id': 6,
            'name': 'Set PM Concentration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get PM Concentration Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        8: {
            'function_id': 8,
            'name': 'Set PM Count Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get PM Count Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        10: {
            'function_id': 10,
            'name': 'PM Concentration',
            'elements': [
                {
                    'name': 'PM10',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'PM25',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'PM100',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H',
        },
        11: {
            'function_id': 11,
            'name': 'PM Count',
            'elements': [
                {
                    'name': 'Greater03um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater05um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater10um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater25um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater50um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Greater100um',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H H H H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2145: {
    'device_identifier': 2145,
    'name': 'Piezo Speaker Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Beep',
            'elements': [
                {
                    'name': 'Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Volume',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Duration',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B I',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Beep',
            'elements': [
                {
                    'name': 'Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Volume',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duration',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duration Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H B I I',
        },
        3: {
            'function_id': 3,
            'name': 'Set Alarm',
            'elements': [
                {
                    'name': 'Start Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'End Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Step Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Step Delay',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Volume',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Duration',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H H H B I',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Alarm',
            'elements': [
                {
                    'name': 'Start Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'End Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Step Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Step Delay',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Volume',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duration',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duration Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H H B I I H',
        },
        5: {
            'function_id': 5,
            'name': 'Update Volume',
            'elements': [
                {
                    'name': 'Volume',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Update Frequency',
            'elements': [
                {
                    'name': 'Frequency',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Beep Finished',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Alarm Finished',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2101: {
    'device_identifier': 2101,
    'name': 'PTC Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        5: {
            'function_id': 5,
            'name': 'Get Resistance',
            'elements': [
                {
                    'name': 'Resistance',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        6: {
            'function_id': 6,
            'name': 'Set Resistance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Resistance Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        8: {
            'function_id': 8,
            'name': 'Resistance',
            'elements': [
                {
                    'name': 'Resistance',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        9: {
            'function_id': 9,
            'name': 'Set Noise Rejection Filter',
            'elements': [
                {
                    'name': 'Filter',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Noise Rejection Filter',
            'elements': [
                {
                    'name': 'Filter',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        11: {
            'function_id': 11,
            'name': 'Is Sensor Connected',
            'elements': [
                {
                    'name': 'Connected',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        12: {
            'function_id': 12,
            'name': 'Set Wire Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        13: {
            'function_id': 13,
            'name': 'Get Wire Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        14: {
            'function_id': 14,
            'name': 'Set Moving Average Configuration',
            'elements': [
                {
                    'name': 'Moving Average Length Resistance',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Moving Average Length Temperature',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H',
            'out_struct_format': '',
        },
        15: {
            'function_id': 15,
            'name': 'Get Moving Average Configuration',
            'elements': [
                {
                    'name': 'Moving Average Length Resistance',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Moving Average Length Temperature',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        16: {
            'function_id': 16,
            'name': 'Set Sensor Connected Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        17: {
            'function_id': 17,
            'name': 'Get Sensor Connected Callback Configuration',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        18: {
            'function_id': 18,
            'name': 'Sensor Connected',
            'elements': [
                {
                    'name': 'Connected',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2106: {
    'device_identifier': 2106,
    'name': 'Real-Time Clock Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Date Time',
            'elements': [
                {
                    'name': 'Year',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Month',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Day',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Hour',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Minute',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Second',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Centisecond',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Weekday',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H B B B B B B B',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Date Time',
            'elements': [
                {
                    'name': 'Year',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Month',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Day',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hour',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Minute',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Second',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Centisecond',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Weekday',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Timestamp',
                    'type': 'int64',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H B B B B B B B q',
        },
        3: {
            'function_id': 3,
            'name': 'Get Timestamp',
            'elements': [
                {
                    'name': 'Timestamp',
                    'type': 'int64',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'q',
        },
        4: {
            'function_id': 4,
            'name': 'Set Offset',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'b',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Offset',
            'elements': [
                {
                    'name': 'Offset',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'b',
        },
        6: {
            'function_id': 6,
            'name': 'Set Date Time Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Date Time Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        8: {
            'function_id': 8,
            'name': 'Set Alarm',
            'elements': [
                {
                    'name': 'Month',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Day',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Hour',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Minute',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Second',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Weekday',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Interval',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'b b b b b b i',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Alarm',
            'elements': [
                {
                    'name': 'Month',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Day',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hour',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Minute',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Second',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Weekday',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Interval',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'b b b b b b i',
        },
        10: {
            'function_id': 10,
            'name': 'Date Time',
            'elements': [
                {
                    'name': 'Year',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Month',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Day',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hour',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Minute',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Second',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Centisecond',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Weekday',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Timestamp',
                    'type': 'int64',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H B B B B B B B q',
        },
        11: {
            'function_id': 11,
            'name': 'Alarm',
            'elements': [
                {
                    'name': 'Year',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Month',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Day',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hour',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Minute',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Second',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Centisecond',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Weekday',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Timestamp',
                    'type': 'int64',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H B B B B B B B q',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
289: {
    'device_identifier': 289,
    'name': 'Remote Switch Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Switching State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        2: {
            'function_id': 2,
            'name': 'Switching Done',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Set Repeats',
            'elements': [
                {
                    'name': 'Repeats',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Repeats',
            'elements': [
                {
                    'name': 'Repeats',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        5: {
            'function_id': 5,
            'name': 'Switch Socket A',
            'elements': [
                {
                    'name': 'House Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Receiver Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Switch Socket B',
            'elements': [
                {
                    'name': 'Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Unit',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I B B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Dim Socket B',
            'elements': [
                {
                    'name': 'Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Unit',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Dim Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I B B',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Switch Socket C',
            'elements': [
                {
                    'name': 'System Code',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Device Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'c B B',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Set Remote Configuration',
            'elements': [
                {
                    'name': 'Remote Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Minimum Repeats',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B H !',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Remote Configuration',
            'elements': [
                {
                    'name': 'Remote Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Minimum Repeats',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Callback Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B H !',
        },
        11: {
            'function_id': 11,
            'name': 'Get Remote Status A',
            'elements': [
                {
                    'name': 'House Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Receiver Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Repeats',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B H',
        },
        12: {
            'function_id': 12,
            'name': 'Get Remote Status B',
            'elements': [
                {
                    'name': 'Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Unit',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Dim Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Repeats',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I B B B H',
        },
        13: {
            'function_id': 13,
            'name': 'Get Remote Status C',
            'elements': [
                {
                    'name': 'System Code',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Device Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Repeats',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'c B B H',
        },
        14: {
            'function_id': 14,
            'name': 'Remote Status A',
            'elements': [
                {
                    'name': 'House Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Receiver Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Repeats',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B H',
        },
        15: {
            'function_id': 15,
            'name': 'Remote Status B',
            'elements': [
                {
                    'name': 'Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Unit',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Dim Value',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Repeats',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I B B B H',
        },
        16: {
            'function_id': 16,
            'name': 'Remote Status C',
            'elements': [
                {
                    'name': 'System Code',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Device Code',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Switch To',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Repeats',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'c B B H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
282: {
    'device_identifier': 282,
    'name': 'RGB LED Button Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Color',
            'elements': [
                {
                    'name': 'Red',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Green',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Blue',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Color',
            'elements': [
                {
                    'name': 'Red',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Green',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Blue',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B',
        },
        3: {
            'function_id': 3,
            'name': 'Get Button State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        4: {
            'function_id': 4,
            'name': 'Button State Changed',
            'elements': [
                {
                    'name': 'State',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        5: {
            'function_id': 5,
            'name': 'Set Color Calibration',
            'elements': [
                {
                    'name': 'Red',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Green',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Blue',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Color Calibration',
            'elements': [
                {
                    'name': 'Red',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Green',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Blue',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
272: {
    'device_identifier': 272,
    'name': 'RGB LED Matrix Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Red',
            'elements': [
                {
                    'name': 'Red',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Red',
            'elements': [
                {
                    'name': 'Red',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '64B',
        },
        3: {
            'function_id': 3,
            'name': 'Set Green',
            'elements': [
                {
                    'name': 'Green',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Green',
            'elements': [
                {
                    'name': 'Green',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '64B',
        },
        5: {
            'function_id': 5,
            'name': 'Set Blue',
            'elements': [
                {
                    'name': 'Blue',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Blue',
            'elements': [
                {
                    'name': 'Blue',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '64B',
        },
        7: {
            'function_id': 7,
            'name': 'Set Frame Duration',
            'elements': [
                {
                    'name': 'Frame Duration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get Frame Duration',
            'elements': [
                {
                    'name': 'Frame Duration',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        9: {
            'function_id': 9,
            'name': 'Draw Frame',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Supply Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        11: {
            'function_id': 11,
            'name': 'Frame Started',
            'elements': [
                {
                    'name': 'Frame Number',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2127: {
    'device_identifier': 2127,
    'name': 'RGB LED Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set RGB Value',
            'elements': [
                {
                    'name': 'R',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'G',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'B',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get RGB Value',
            'elements': [
                {
                    'name': 'R',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'G',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'B',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
294: {
    'device_identifier': 294,
    'name': 'Rotary Encoder Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Count',
            'elements': [
                {
                    'name': 'Reset',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Count Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Count Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'Count',
            'elements': [
                {
                    'name': 'Count',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        5: {
            'function_id': 5,
            'name': 'Is Pressed',
            'elements': [
                {
                    'name': 'Pressed',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        6: {
            'function_id': 6,
            'name': 'Pressed',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Released',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2140: {
    'device_identifier': 2140,
    'name': 'Rotary Poti Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Position',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        2: {
            'function_id': 2,
            'name': 'Set Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Position Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        4: {
            'function_id': 4,
            'name': 'Position',
            'elements': [
                {
                    'name': 'Position',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2108: {
    'device_identifier': 2108,
    'name': 'RS232 Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Write Low Level',
            'elements': [
                {
                    'name': 'Message Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Message Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Message Chunk Data',
                    'type': 'char',
                    'cardinality': '60',
                    'direction': 'in'
                },
                {
                    'name': 'Message Chunk Written',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'H H 60c',
            'out_struct_format': 'B',
        },
        2: {
            'function_id': 2,
            'name': 'Read Low Level',
            'elements': [
                {
                    'name': 'Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Message Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Message Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Message Chunk Data',
                    'type': 'char',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': 'H H 60c',
        },
        3: {
            'function_id': 3,
            'name': 'Enable Read Callback',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Disable Read Callback',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Is Read Callback Enabled',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        6: {
            'function_id': 6,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Baudrate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Parity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Stopbits',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Wordlength',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Flowcontrol',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I B B B B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Baudrate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Parity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Stopbits',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Wordlength',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Flowcontrol',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I B B B B',
        },
        8: {
            'function_id': 8,
            'name': 'Set Buffer Config',
            'elements': [
                {
                    'name': 'Send Buffer Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Receive Buffer Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Buffer Config',
            'elements': [
                {
                    'name': 'Send Buffer Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Receive Buffer Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        10: {
            'function_id': 10,
            'name': 'Get Buffer Status',
            'elements': [
                {
                    'name': 'Send Buffer Used',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Receive Buffer Used',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        11: {
            'function_id': 11,
            'name': 'Get Error Count',
            'elements': [
                {
                    'name': 'Error Count Overrun',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Parity',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        12: {
            'function_id': 12,
            'name': 'Read Low Level',
            'elements': [
                {
                    'name': 'Message Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Message Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Message Chunk Data',
                    'type': 'char',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 60c',
        },
        13: {
            'function_id': 13,
            'name': 'Error Count',
            'elements': [
                {
                    'name': 'Error Count Overrun',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Parity',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        14: {
            'function_id': 14,
            'name': 'Set Frame Readable Callback Configuration',
            'elements': [
                {
                    'name': 'Frame Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        15: {
            'function_id': 15,
            'name': 'Get Frame Readable Callback Configuration',
            'elements': [
                {
                    'name': 'Frame Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        16: {
            'function_id': 16,
            'name': 'Frame Readable',
            'elements': [
                {
                    'name': 'Frame Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
277: {
    'device_identifier': 277,
    'name': 'RS485 Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Write Low Level',
            'elements': [
                {
                    'name': 'Message Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Message Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Message Chunk Data',
                    'type': 'char',
                    'cardinality': '60',
                    'direction': 'in'
                },
                {
                    'name': 'Message Chunk Written',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'H H 60c',
            'out_struct_format': 'B',
        },
        2: {
            'function_id': 2,
            'name': 'Read Low Level',
            'elements': [
                {
                    'name': 'Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Message Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Message Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Message Chunk Data',
                    'type': 'char',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': 'H H 60c',
        },
        3: {
            'function_id': 3,
            'name': 'Enable Read Callback',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Disable Read Callback',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Is Read Callback Enabled',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        6: {
            'function_id': 6,
            'name': 'Set RS485 Configuration',
            'elements': [
                {
                    'name': 'Baudrate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Parity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Stopbits',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Wordlength',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Duplex',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I B B B B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get RS485 Configuration',
            'elements': [
                {
                    'name': 'Baudrate',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Parity',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Stopbits',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Wordlength',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Duplex',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I B B B B',
        },
        8: {
            'function_id': 8,
            'name': 'Set Modbus Configuration',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Master Request Timeout',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B I',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Modbus Configuration',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Master Request Timeout',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I',
        },
        10: {
            'function_id': 10,
            'name': 'Set Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        12: {
            'function_id': 12,
            'name': 'Set Communication LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        13: {
            'function_id': 13,
            'name': 'Get Communication LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        14: {
            'function_id': 14,
            'name': 'Set Error LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        15: {
            'function_id': 15,
            'name': 'Get Error LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        16: {
            'function_id': 16,
            'name': 'Set Buffer Config',
            'elements': [
                {
                    'name': 'Send Buffer Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Receive Buffer Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H',
            'out_struct_format': '',
        },
        17: {
            'function_id': 17,
            'name': 'Get Buffer Config',
            'elements': [
                {
                    'name': 'Send Buffer Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Receive Buffer Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        18: {
            'function_id': 18,
            'name': 'Get Buffer Status',
            'elements': [
                {
                    'name': 'Send Buffer Used',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Receive Buffer Used',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H',
        },
        19: {
            'function_id': 19,
            'name': 'Enable Error Count Callback',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        20: {
            'function_id': 20,
            'name': 'Disable Error Count Callback',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        21: {
            'function_id': 21,
            'name': 'Is Error Count Callback Enabled',
            'elements': [
                {
                    'name': 'Enabled',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        22: {
            'function_id': 22,
            'name': 'Get Error Count',
            'elements': [
                {
                    'name': 'Overrun Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Parity Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        23: {
            'function_id': 23,
            'name': 'Get Modbus Common Error Count',
            'elements': [
                {
                    'name': 'Timeout Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Checksum Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Frame Too Big Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Illegal Function Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Illegal Data Address Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Illegal Data Value Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Slave Device Failure Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I I I I',
        },
        24: {
            'function_id': 24,
            'name': 'Modbus Slave Report Exception',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B b',
            'out_struct_format': '',
        },
        25: {
            'function_id': 25,
            'name': 'Modbus Slave Answer Read Coils Request Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Coils Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Coils Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Coils Chunk Data',
                    'type': 'bool',
                    'cardinality': '472',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B H H 472!',
            'out_struct_format': '',
        },
        26: {
            'function_id': 26,
            'name': 'Modbus Master Read Coils',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I H',
            'out_struct_format': 'B',
        },
        27: {
            'function_id': 27,
            'name': 'Modbus Slave Answer Read Holding Registers Request Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Holding Registers Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Holding Registers Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Holding Registers Chunk Data',
                    'type': 'uint16',
                    'cardinality': '29',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B H H 29H',
            'out_struct_format': '',
        },
        28: {
            'function_id': 28,
            'name': 'Modbus Master Read Holding Registers',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I H',
            'out_struct_format': 'B',
        },
        29: {
            'function_id': 29,
            'name': 'Modbus Slave Answer Write Single Coil Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        30: {
            'function_id': 30,
            'name': 'Modbus Master Write Single Coil',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Coil Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Coil Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I !',
            'out_struct_format': 'B',
        },
        31: {
            'function_id': 31,
            'name': 'Modbus Slave Answer Write Single Register Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        32: {
            'function_id': 32,
            'name': 'Modbus Master Write Single Register',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Register Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Register Value',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I H',
            'out_struct_format': 'B',
        },
        33: {
            'function_id': 33,
            'name': 'Modbus Slave Answer Write Multiple Coils Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        34: {
            'function_id': 34,
            'name': 'Modbus Master Write Multiple Coils Low Level',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Coils Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Coils Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Coils Chunk Data',
                    'type': 'bool',
                    'cardinality': '440',
                    'direction': 'in'
                },
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I H H 440!',
            'out_struct_format': 'B',
        },
        35: {
            'function_id': 35,
            'name': 'Modbus Slave Answer Write Multiple Registers Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        36: {
            'function_id': 36,
            'name': 'Modbus Master Write Multiple Registers Low Level',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Registers Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Registers Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Registers Chunk Data',
                    'type': 'uint16',
                    'cardinality': '27',
                    'direction': 'in'
                },
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I H H 27H',
            'out_struct_format': 'B',
        },
        37: {
            'function_id': 37,
            'name': 'Modbus Slave Answer Read Discrete Inputs Request Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Discrete Inputs Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Discrete Inputs Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Discrete Inputs Chunk Data',
                    'type': 'bool',
                    'cardinality': '472',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B H H 472!',
            'out_struct_format': '',
        },
        38: {
            'function_id': 38,
            'name': 'Modbus Master Read Discrete Inputs',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I H',
            'out_struct_format': 'B',
        },
        39: {
            'function_id': 39,
            'name': 'Modbus Slave Answer Read Input Registers Request Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Input Registers Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Input Registers Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Input Registers Chunk Data',
                    'type': 'uint16',
                    'cardinality': '29',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B H H 29H',
            'out_struct_format': '',
        },
        40: {
            'function_id': 40,
            'name': 'Modbus Master Read Input Registers',
            'elements': [
                {
                    'name': 'Slave Address',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B I H',
            'out_struct_format': 'B',
        },
        41: {
            'function_id': 41,
            'name': 'Read Low Level',
            'elements': [
                {
                    'name': 'Message Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Message Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Message Chunk Data',
                    'type': 'char',
                    'cardinality': '60',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 60c',
        },
        42: {
            'function_id': 42,
            'name': 'Error Count',
            'elements': [
                {
                    'name': 'Overrun Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Parity Error Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I',
        },
        43: {
            'function_id': 43,
            'name': 'Modbus Slave Read Coils Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H',
        },
        44: {
            'function_id': 44,
            'name': 'Modbus Master Read Coils Response Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Coils Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Coils Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Coils Chunk Data',
                    'type': 'bool',
                    'cardinality': '464',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B b H H 464!',
        },
        45: {
            'function_id': 45,
            'name': 'Modbus Slave Read Holding Registers Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H',
        },
        46: {
            'function_id': 46,
            'name': 'Modbus Master Read Holding Registers Response Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Holding Registers Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Holding Registers Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Holding Registers Chunk Data',
                    'type': 'uint16',
                    'cardinality': '29',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B b H H 29H',
        },
        47: {
            'function_id': 47,
            'name': 'Modbus Slave Write Single Coil Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Coil Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Coil Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I !',
        },
        48: {
            'function_id': 48,
            'name': 'Modbus Master Write Single Coil Response',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B b',
        },
        49: {
            'function_id': 49,
            'name': 'Modbus Slave Write Single Register Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Register Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Register Value',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H',
        },
        50: {
            'function_id': 50,
            'name': 'Modbus Master Write Single Register Response',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B b',
        },
        51: {
            'function_id': 51,
            'name': 'Modbus Slave Write Multiple Coils Request Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Coils Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Coils Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Coils Chunk Data',
                    'type': 'bool',
                    'cardinality': '440',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H H 440!',
        },
        52: {
            'function_id': 52,
            'name': 'Modbus Master Write Multiple Coils Response',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B b',
        },
        53: {
            'function_id': 53,
            'name': 'Modbus Slave Write Multiple Registers Request Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Registers Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Registers Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Registers Chunk Data',
                    'type': 'uint16',
                    'cardinality': '27',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H H 27H',
        },
        54: {
            'function_id': 54,
            'name': 'Modbus Master Write Multiple Registers Response',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B b',
        },
        55: {
            'function_id': 55,
            'name': 'Modbus Slave Read Discrete Inputs Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H',
        },
        56: {
            'function_id': 56,
            'name': 'Modbus Master Read Discrete Inputs Response Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Discrete Inputs Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Discrete Inputs Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Discrete Inputs Chunk Data',
                    'type': 'bool',
                    'cardinality': '464',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B b H H 464!',
        },
        57: {
            'function_id': 57,
            'name': 'Modbus Slave Read Input Registers Request',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Starting Address',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B I H',
        },
        58: {
            'function_id': 58,
            'name': 'Modbus Master Read Input Registers Response Low Level',
            'elements': [
                {
                    'name': 'Request ID',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Exception Code',
                    'type': 'int8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Input Registers Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Input Registers Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Input Registers Chunk Data',
                    'type': 'uint16',
                    'cardinality': '29',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B b H H 29H',
        },
        59: {
            'function_id': 59,
            'name': 'Set Frame Readable Callback Configuration',
            'elements': [
                {
                    'name': 'Frame Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        60: {
            'function_id': 60,
            'name': 'Get Frame Readable Callback Configuration',
            'elements': [
                {
                    'name': 'Frame Size',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        61: {
            'function_id': 61,
            'name': 'Frame Readable',
            'elements': [
                {
                    'name': 'Frame Count',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2137: {
    'device_identifier': 2137,
    'name': 'Segment Display 4x7 Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set Segments',
            'elements': [
                {
                    'name': 'Digit0',
                    'type': 'bool',
                    'cardinality': '8',
                    'direction': 'in'
                },
                {
                    'name': 'Digit1',
                    'type': 'bool',
                    'cardinality': '8',
                    'direction': 'in'
                },
                {
                    'name': 'Digit2',
                    'type': 'bool',
                    'cardinality': '8',
                    'direction': 'in'
                },
                {
                    'name': 'Digit3',
                    'type': 'bool',
                    'cardinality': '8',
                    'direction': 'in'
                },
                {
                    'name': 'Colon',
                    'type': 'bool',
                    'cardinality': '2',
                    'direction': 'in'
                },
                {
                    'name': 'Tick',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '8! 8! 8! 8! 2! !',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get Segments',
            'elements': [
                {
                    'name': 'Digit0',
                    'type': 'bool',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Digit1',
                    'type': 'bool',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Digit2',
                    'type': 'bool',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Digit3',
                    'type': 'bool',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Colon',
                    'type': 'bool',
                    'cardinality': '2',
                    'direction': 'out'
                },
                {
                    'name': 'Tick',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8! 8! 8! 8! 2! !',
        },
        3: {
            'function_id': 3,
            'name': 'Set Brightness',
            'elements': [
                {
                    'name': 'Brightness',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Brightness',
            'elements': [
                {
                    'name': 'Brightness',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        5: {
            'function_id': 5,
            'name': 'Set Numeric Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'int8',
                    'cardinality': '4',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '4b',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Set Selected Segment',
            'elements': [
                {
                    'name': 'Segment',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Selected Segment',
            'elements': [
                {
                    'name': 'Segment',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '!',
        },
        8: {
            'function_id': 8,
            'name': 'Start Counter',
            'elements': [
                {
                    'name': 'Value From',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value To',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Increment',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Length',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'h h h I',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get Counter Value',
            'elements': [
                {
                    'name': 'Value',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        10: {
            'function_id': 10,
            'name': 'Counter Finished',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
296: {
    'device_identifier': 296,
    'name': 'Solid State Relay Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '!',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get State',
            'elements': [
                {
                    'name': 'State',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        3: {
            'function_id': 3,
            'name': 'Set Monoflop',
            'elements': [
                {
                    'name': 'State',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '! I',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get Monoflop',
            'elements': [
                {
                    'name': 'State',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Time Remaining',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! I I',
        },
        5: {
            'function_id': 5,
            'name': 'Monoflop Done',
            'elements': [
                {
                    'name': 'State',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '!',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
290: {
    'device_identifier': 290,
    'name': 'Sound Pressure Level Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Decibel',
            'elements': [
                {
                    'name': 'Decibel',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        2: {
            'function_id': 2,
            'name': 'Set Decibel Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c H H',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Decibel Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c H H',
        },
        4: {
            'function_id': 4,
            'name': 'Decibel',
            'elements': [
                {
                    'name': 'Decibel',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        5: {
            'function_id': 5,
            'name': 'Get Spectrum Low Level',
            'elements': [
                {
                    'name': 'Spectrum Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Spectrum Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Spectrum Chunk Data',
                    'type': 'uint16',
                    'cardinality': '30',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 30H',
        },
        6: {
            'function_id': 6,
            'name': 'Set Spectrum Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Spectrum Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        8: {
            'function_id': 8,
            'name': 'Spectrum Low Level',
            'elements': [
                {
                    'name': 'Spectrum Length',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Spectrum Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Spectrum Chunk Data',
                    'type': 'uint16',
                    'cardinality': '30',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H 30H',
        },
        9: {
            'function_id': 9,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'FFT Size',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Weighting',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'FFT Size',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Weighting',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
291: {
    'device_identifier': 291,
    'name': 'Temperature IR Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Ambient Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        2: {
            'function_id': 2,
            'name': 'Set Ambient Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Ambient Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        4: {
            'function_id': 4,
            'name': 'Ambient Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        5: {
            'function_id': 5,
            'name': 'Get Object Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        6: {
            'function_id': 6,
            'name': 'Set Object Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Object Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        8: {
            'function_id': 8,
            'name': 'Object Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        9: {
            'function_id': 9,
            'name': 'Set Emissivity',
            'elements': [
                {
                    'name': 'Emissivity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H',
            'out_struct_format': '',
        },
        10: {
            'function_id': 10,
            'name': 'Get Emissivity',
            'elements': [
                {
                    'name': 'Emissivity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2113: {
    'device_identifier': 2113,
    'name': 'Temperature Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        2: {
            'function_id': 2,
            'name': 'Set Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c h h',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c h h',
        },
        4: {
            'function_id': 4,
            'name': 'Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        5: {
            'function_id': 5,
            'name': 'Set Heater Configuration',
            'elements': [
                {
                    'name': 'Heater Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Heater Configuration',
            'elements': [
                {
                    'name': 'Heater Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
278: {
    'device_identifier': 278,
    'name': 'Thermal Imaging Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get High Contrast Image Low Level',
            'elements': [
                {
                    'name': 'Image Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Image Chunk Data',
                    'type': 'uint8',
                    'cardinality': '62',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H 62B',
        },
        2: {
            'function_id': 2,
            'name': 'Get Temperature Image Low Level',
            'elements': [
                {
                    'name': 'Image Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Image Chunk Data',
                    'type': 'uint16',
                    'cardinality': '31',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H 31H',
        },
        3: {
            'function_id': 3,
            'name': 'Get Statistics',
            'elements': [
                {
                    'name': 'Spotmeter Statistics',
                    'type': 'uint16',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Temperatures',
                    'type': 'uint16',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Resolution',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'FFC Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature Warning',
                    'type': 'bool',
                    'cardinality': '2',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4H 4H B B 2!',
        },
        4: {
            'function_id': 4,
            'name': 'Set Resolution',
            'elements': [
                {
                    'name': 'Resolution',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        5: {
            'function_id': 5,
            'name': 'Get Resolution',
            'elements': [
                {
                    'name': 'Resolution',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        6: {
            'function_id': 6,
            'name': 'Set Spotmeter Config',
            'elements': [
                {
                    'name': 'Region Of Interest',
                    'type': 'uint8',
                    'cardinality': '4',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '4B',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Spotmeter Config',
            'elements': [
                {
                    'name': 'Region Of Interest',
                    'type': 'uint8',
                    'cardinality': '4',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4B',
        },
        8: {
            'function_id': 8,
            'name': 'Set High Contrast Config',
            'elements': [
                {
                    'name': 'Region Of Interest',
                    'type': 'uint8',
                    'cardinality': '4',
                    'direction': 'in'
                },
                {
                    'name': 'Dampening Factor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Clip Limit',
                    'type': 'uint16',
                    'cardinality': '2',
                    'direction': 'in'
                },
                {
                    'name': 'Empty Counts',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': '4B H 2H H',
            'out_struct_format': '',
        },
        9: {
            'function_id': 9,
            'name': 'Get High Contrast Config',
            'elements': [
                {
                    'name': 'Region Of Interest',
                    'type': 'uint8',
                    'cardinality': '4',
                    'direction': 'out'
                },
                {
                    'name': 'Dampening Factor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Clip Limit',
                    'type': 'uint16',
                    'cardinality': '2',
                    'direction': 'out'
                },
                {
                    'name': 'Empty Counts',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '4B H 2H H',
        },
        10: {
            'function_id': 10,
            'name': 'Set Image Transfer Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Image Transfer Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        12: {
            'function_id': 12,
            'name': 'High Contrast Image Low Level',
            'elements': [
                {
                    'name': 'Image Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Image Chunk Data',
                    'type': 'uint8',
                    'cardinality': '62',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H 62B',
        },
        13: {
            'function_id': 13,
            'name': 'Temperature Image Low Level',
            'elements': [
                {
                    'name': 'Image Chunk Offset',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Image Chunk Data',
                    'type': 'uint16',
                    'cardinality': '31',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H 31H',
        },
        14: {
            'function_id': 14,
            'name': 'Set Flux Linear Parameters',
            'elements': [
                {
                    'name': 'Scene Emissivity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Temperature Background',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Tau Window',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Temperatur Window',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Tau Atmosphere',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Temperature Atmosphere',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Reflection Window',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Temperature Reflection',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H H H H H H H',
            'out_struct_format': '',
        },
        15: {
            'function_id': 15,
            'name': 'Get Flux Linear Parameters',
            'elements': [
                {
                    'name': 'Scene Emissivity',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature Background',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Tau Window',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperatur Window',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Tau Atmosphere',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature Atmosphere',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Reflection Window',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Temperature Reflection',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H H H H H H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2109: {
    'device_identifier': 2109,
    'name': 'Thermocouple Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Temperature Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        5: {
            'function_id': 5,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Averaging',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Thermocouple Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Filter',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        6: {
            'function_id': 6,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Averaging',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Thermocouple Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Filter',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B',
        },
        7: {
            'function_id': 7,
            'name': 'Get Error State',
            'elements': [
                {
                    'name': 'Over Under',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Open Circuit',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! !',
        },
        8: {
            'function_id': 8,
            'name': 'Error State',
            'elements': [
                {
                    'name': 'Over Under',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Open Circuit',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '! !',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2118: {
    'device_identifier': 2118,
    'name': 'UV Light Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get UVA',
            'elements': [
                {
                    'name': 'UVA',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set UVA Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get UVA Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'UVA',
            'elements': [
                {
                    'name': 'UVA',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        5: {
            'function_id': 5,
            'name': 'Get UVB',
            'elements': [
                {
                    'name': 'UVB',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        6: {
            'function_id': 6,
            'name': 'Set UVB Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get UVB Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        8: {
            'function_id': 8,
            'name': 'UVB',
            'elements': [
                {
                    'name': 'UVB',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        9: {
            'function_id': 9,
            'name': 'Get UVI',
            'elements': [
                {
                    'name': 'UVI',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        10: {
            'function_id': 10,
            'name': 'Set UVI Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get UVI Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        12: {
            'function_id': 12,
            'name': 'UVI',
            'elements': [
                {
                    'name': 'UVI',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        13: {
            'function_id': 13,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Integration Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Integration Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
2105: {
    'device_identifier': 2105,
    'name': 'Voltage/Current Bricklet 2.0',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Get Current',
            'elements': [
                {
                    'name': 'Current',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        2: {
            'function_id': 2,
            'name': 'Set Current Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        3: {
            'function_id': 3,
            'name': 'Get Current Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        4: {
            'function_id': 4,
            'name': 'Current',
            'elements': [
                {
                    'name': 'Current',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        5: {
            'function_id': 5,
            'name': 'Get Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        6: {
            'function_id': 6,
            'name': 'Set Voltage Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        7: {
            'function_id': 7,
            'name': 'Get Voltage Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        8: {
            'function_id': 8,
            'name': 'Voltage',
            'elements': [
                {
                    'name': 'Voltage',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        9: {
            'function_id': 9,
            'name': 'Get Power',
            'elements': [
                {
                    'name': 'Power',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        10: {
            'function_id': 10,
            'name': 'Set Power Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c i i',
            'out_struct_format': '',
        },
        11: {
            'function_id': 11,
            'name': 'Get Power Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c i i',
        },
        12: {
            'function_id': 12,
            'name': 'Power',
            'elements': [
                {
                    'name': 'Power',
                    'type': 'int32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'i',
        },
        13: {
            'function_id': 13,
            'name': 'Set Configuration',
            'elements': [
                {
                    'name': 'Averaging',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Voltage Conversion Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Current Conversion Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B',
            'out_struct_format': '',
        },
        14: {
            'function_id': 14,
            'name': 'Get Configuration',
            'elements': [
                {
                    'name': 'Averaging',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Voltage Conversion Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current Conversion Time',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B B B',
        },
        15: {
            'function_id': 15,
            'name': 'Set Calibration',
            'elements': [
                {
                    'name': 'Voltage Multiplier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Voltage Divisor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Current Multiplier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Current Divisor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'H H H H',
            'out_struct_format': '',
        },
        16: {
            'function_id': 16,
            'name': 'Get Calibration',
            'elements': [
                {
                    'name': 'Voltage Multiplier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Voltage Divisor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current Multiplier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Current Divisor',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'H H H H',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
},
279: {
    'device_identifier': 279,
    'name': 'XMC1400 Breakout Bricklet',
    'packets': {
        1: {
            'function_id': 1,
            'name': 'Set GPIO Config',
            'elements': [
                {
                    'name': 'Port',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pin',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Input Hysteresis',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Output Level',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B B B B !',
            'out_struct_format': '',
        },
        2: {
            'function_id': 2,
            'name': 'Get GPIO Input',
            'elements': [
                {
                    'name': 'Port',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Pin',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B B',
            'out_struct_format': '!',
        },
        3: {
            'function_id': 3,
            'name': 'Set ADC Channel Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B !',
            'out_struct_format': '',
        },
        4: {
            'function_id': 4,
            'name': 'Get ADC Channel Config',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Enable',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '!',
        },
        5: {
            'function_id': 5,
            'name': 'Get ADC Channel Value',
            'elements': [
                {
                    'name': 'Channel',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'H',
        },
        6: {
            'function_id': 6,
            'name': 'Get ADC Values',
            'elements': [
                {
                    'name': 'Values',
                    'type': 'uint16',
                    'cardinality': '8',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8H',
        },
        7: {
            'function_id': 7,
            'name': 'Set ADC Values Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I !',
            'out_struct_format': '',
        },
        8: {
            'function_id': 8,
            'name': 'Get ADC Values Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I !',
        },
        9: {
            'function_id': 9,
            'name': 'ADC Values',
            'elements': [
                {
                    'name': 'Values',
                    'type': 'uint16',
                    'cardinality': '8',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8H',
        },
        10: {
            'function_id': 10,
            'name': 'Get Count',
            'elements': [
                {
                    'name': 'Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        11: {
            'function_id': 11,
            'name': 'Set Count Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Min',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Max',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I ! c I I',
            'out_struct_format': '',
        },
        12: {
            'function_id': 12,
            'name': 'Get Count Callback Configuration',
            'elements': [
                {
                    'name': 'Period',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Value Has To Change',
                    'type': 'bool',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Option',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Min',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Max',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I ! c I I',
        },
        13: {
            'function_id': 13,
            'name': 'Count',
            'elements': [
                {
                    'name': 'Count',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        234: {
            'function_id': 234,
            'name': 'Get SPITFP Error Count',
            'elements': [
                {
                    'name': 'Error Count Ack Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Message Checksum',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Frame',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Error Count Overflow',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I I I I',
        },
        235: {
            'function_id': 235,
            'name': 'Set Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': 'B',
        },
        236: {
            'function_id': 236,
            'name': 'Get Bootloader Mode',
            'elements': [
                {
                    'name': 'Mode',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        237: {
            'function_id': 237,
            'name': 'Set Write Firmware Pointer',
            'elements': [
                {
                    'name': 'Pointer',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        238: {
            'function_id': 238,
            'name': 'Write Firmware',
            'elements': [
                {
                    'name': 'Data',
                    'type': 'uint8',
                    'cardinality': '64',
                    'direction': 'in'
                },
                {
                    'name': 'Status',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '64B',
            'out_struct_format': 'B',
        },
        239: {
            'function_id': 239,
            'name': 'Set Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'B',
            'out_struct_format': '',
        },
        240: {
            'function_id': 240,
            'name': 'Get Status LED Config',
            'elements': [
                {
                    'name': 'Config',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'B',
        },
        242: {
            'function_id': 242,
            'name': 'Get Chip Temperature',
            'elements': [
                {
                    'name': 'Temperature',
                    'type': 'int16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'h',
        },
        243: {
            'function_id': 243,
            'name': 'Reset',
            'elements': [
                
            ],
            'in_struct_format': '',
            'out_struct_format': '',
        },
        248: {
            'function_id': 248,
            'name': 'Write UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'in'
                }
            ],
            'in_struct_format': 'I',
            'out_struct_format': '',
        },
        249: {
            'function_id': 249,
            'name': 'Read UID',
            'elements': [
                {
                    'name': 'UID',
                    'type': 'uint32',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': 'I',
        },
        255: {
            'function_id': 255,
            'name': 'Get Identity',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H',
        },
        253: {
            'function_id': 253,
            'name': 'Enumerate',
            'elements': [
                {
                    'name': 'Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Connected Uid',
                    'type': 'string',
                    'cardinality': '8',
                    'direction': 'out'
                },
                {
                    'name': 'Position',
                    'type': 'char',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Hardware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Firmware Version',
                    'type': 'uint8',
                    'cardinality': '3',
                    'direction': 'out'
                },
                {
                    'name': 'Device Identifier',
                    'type': 'uint16',
                    'cardinality': '1',
                    'direction': 'out'
                },
                {
                    'name': 'Enumeration Type',
                    'type': 'uint8',
                    'cardinality': '1',
                    'direction': 'out'
                }
            ],
            'in_struct_format': '',
            'out_struct_format': '8s 8s c 3B 3B H B'
        },
        252: {
            'function_id': 252,
            'name': 'CoMCU Enumerate',
            'elements': [],
            'in_struct_format': '',
            'out_struct_format': ''
        }
    }
}
}

pearson = [1, 87, 49, 12, 176, 178, 102, 166, 121, 193, 6, 84, 249, 230, 44, 163,
	14, 197, 213, 181, 161, 85, 218, 80, 64, 239, 24, 226, 236, 142, 38, 200,
	110, 177, 104, 103, 141, 253, 255, 50, 77, 101, 81, 18, 45, 96, 31, 222,
	25, 107, 190, 70, 86, 237, 240, 34, 72, 242, 20, 214, 244, 227, 149, 235,
	97, 234, 57, 22, 60, 250, 82, 175, 208, 5, 127, 199, 111, 62, 135, 248,
	174, 169, 211, 58, 66, 154, 106, 195, 245, 171, 17, 187, 182, 179, 0, 243,
	132, 56, 148, 75, 128, 133, 158, 100, 130, 126, 91, 13, 153, 246, 216, 219,
	119, 68, 223, 78, 83, 88, 201, 99, 122, 11, 92, 32, 136, 114, 52, 10,
	138, 30, 48, 183, 156, 35, 61, 26, 143, 74, 251, 94, 129, 162, 63, 152,
	170, 7, 115, 167, 241, 206, 3, 150, 55, 59, 151, 220, 90, 53, 23, 131,
	125, 173, 15, 238, 79, 95, 89, 16, 105, 137, 225, 224, 217, 160, 37, 123,
	118, 73, 2, 157, 46, 116, 9, 145, 134, 228, 207, 212, 202, 215, 69, 229,
	27, 188, 67, 124, 168, 252, 42, 4, 29, 108, 21, 247, 19, 205, 39, 203,
	233, 40, 186, 147, 198, 192, 155, 33, 164, 191, 98, 204, 165, 180, 117, 76,
	140, 36, 210, 172, 41, 54, 159, 8, 185, 232, 113, 196, 231, 47, 146, 120,
	51, 65, 28, 144, 254, 221, 93, 189, 194, 139, 112, 43, 71, 109, 184, 209]

#checksum = 0
#packet = [0x0B, # Paketlänge
          #0x01, # Sequenznummer
          #0x98, 0x83, 0x00, 0x00, 0x08, 0x01, 0x18, 0x00 # Payload
          #]
#packet = [0x03, 0x10, 0x00]
#for byte in packet:
    #checksum = pearson[checksum ^ byte]
#print("{:x}".format(checksum))


def get_uid_from_data(data):
    return struct.unpack('<I', data[0:4])[0]

def get_length_from_data(data):
    return struct.unpack('<B', data[4:5])[0]

def get_function_id_from_data(data):
    return struct.unpack('<B', data[5:6])[0]

def get_sequence_number_from_data(data):
    return (struct.unpack('<B', data[6:7])[0] >> 4) & 0x0F

def get_response_expected_from_data(data):
    return ((struct.unpack('<B', data[6:7])[0]) & 0x08) != 0

def get_error_code_from_data(data):
    return (struct.unpack('<B', data[7:8])[0] >> 6) & 0x03

BASE58 = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'

# internal
def base58encode(value):
    encoded = ''

    while value >= 58:
        div, mod = divmod(value, 58)
        encoded = BASE58[mod] + encoded
        value = div

    return BASE58[value] + encoded


class PacketBuffer():
    def __init__(self, is_master, dev_info, format):
        self.is_master = is_master
        self.data = bytearray()
        self.frame_start_times = []
        self.frame_end_times = []
        self.device_info = dev_info
        self.format = format

    def add_frame(self, frame):
        try:
            self.data += frame.data['mosi' if self.is_master else 'miso']
            self.frame_start_times.append(frame.start_time)
            self.frame_end_times.append(frame.end_time)
        except KeyError:
            pass

    def remove(self, n):
        self.data = self.data[n:]
        self.frame_start_times = self.frame_start_times[n:]
        self.frame_end_times = self.frame_end_times[n:]

    def find_packet(self, frame_type):
        while len(self.data) > 0:
            packet_len = self.data[0]
            if packet_len < 3 or packet_len > 83:
                self.remove(1)
                continue

            if packet_len > len(self.data):
                return None

            packet_checksum = self.data[-1]

            real_checksum = 0
            for byte in self.data[:-1]:
                real_checksum = pearson[real_checksum ^ byte]

            if real_checksum != packet_checksum:
                self.remove(1)
                continue

            seq_num = self.data[1] & 0x0F
            seq_num_acked = (self.data[1] & 0xF0) >> 4
            start_time = self.frame_start_times[0]
            end_time = self.frame_end_times[packet_len - 1]

            if packet_len == 3:
                self.remove(packet_len)
                return AnalyzerFrame ('Ack', start_time, end_time, {
                        'input_type': frame_type,
                        'length': packet_len,
                        'checksum': packet_checksum,
                        'seq_num': seq_num,
                        'seq_num_acked': seq_num_acked,
                    }
                )

            if packet_len < 11:
                payload = str(self.data[2:-1])
                self.remove(packet_len)
                return AnalyzerFrame('Invalid', start_time, end_time, {
                        'input_type': frame_type,
                        'length': packet_len,
                        'checksum': packet_checksum,
                        'seq_num': seq_num,
                        'seq_num_acked': seq_num_acked,
                        'payload': payload
                    }
                )

            tfp_header = bytes(self.data[2:10])

            uid = base58encode(get_uid_from_data(tfp_header))
            tfp_length = get_length_from_data(tfp_header)
            fid = get_function_id_from_data(tfp_header)

            payload = 'unknown payload'

            try:
                packet = self.device_info['packets'][fid]

                fid = '{} ({})'.format(packet['name'], fid)
                struct_format = packet['in_struct_format'] if self.is_master else packet['out_struct_format']

                if len(struct_format) == 0:
                    payload = 'Empty'
                else:
                    payload = unpack_payload(bytes(self.data[10:-1]), struct_format)
                    if len(struct_format) == 1:
                        payload = [payload]
                    payload = [str(p) for p in payload]

                    direction = 'in' if self.is_master else 'out'
                    payload_names = [e['name'] for e in packet['elements'] if e['direction'] == direction]
                    payload = zip(payload_names, payload)
                    payload = '[' + ', '.join('{}: {}'.format(name, val) for name, val in payload) + ']'
            except:
                pass

            tfp_seq_num = get_sequence_number_from_data(tfp_header)
            error_code = get_error_code_from_data(tfp_header)
            response_expected = get_response_expected_from_data(tfp_header)

            self.remove(packet_len)
            return AnalyzerFrame(self.format, start_time, end_time, {
                    'input_type': frame_type,
                    'length': packet_len,
                    'checksum': packet_checksum,
                    'seq_num': seq_num,
                    'seq_num_acked': seq_num_acked,
                    'uid': uid,
                    'tfp_length': tfp_length,
                    'fid': fid,
                    'tfp_seq_num': tfp_seq_num,
                    'error_code': error_code,
                    'response_expected': response_expected,
                    'payload': payload,
                }
            )

        return None

devices = sorted(['{} ({})'.format(info['name'], info['device_identifier']) for info in device_infos.values()])

class Hla(HighLevelAnalyzer):
    direction = ChoicesSetting(label='Direction', choices=('MOSI', 'MISO'))
    device = ChoicesSetting(label='Device', choices=devices)
    output_format = ChoicesSetting(label='Output Format', choices=('Everything', 'Payload', 'Headers'))

    result_types = {
        'Everything': {
            'format': 'SPITFP [Len: {{data.length}}, SeqNum: {{data.seq_num}}, ACK: {{data.seq_num_acked}}] TFP [UID: {{data.uid}}, Len: {{data.tfp_length}}, FID: {{data.fid}}, SeqNum: {{data.tfp_seq_num}}, Error: {{data.error_code}}, RespExpected: {{data.response_expected}}, Payload: {{data.payload}}], Checksum: {{data.checksum}}'
        },
        'Payload': {
            'format': 'TFP[FID: {{data.fid}}, Error: {{data.error_code}}, Payload: {{data.payload}}]'
        },
        'Headers': {
            'format': 'SPITFP [Len: {{data.length}}, SeqNum: {{data.seq_num}}, ACK: {{data.seq_num_acked}}] TFP [UID: {{data.uid}}, Len: {{data.tfp_length}}, FID: {{data.fid}}, SeqNum: {{data.tfp_seq_num}}, Error: {{data.error_code}}, RespExpected: {{data.response_expected}}], Checksum: {{data.checksum}}'
        },
        'Ack': {
            'format': 'SPITFP [Len: {{data.length}}, SeqNum: {{data.seq_num}}, ACK: {{data.seq_num_acked}}], Checksum: {{data.checksum}}'
        },
        'Invalid': {
            'format': 'SPITFP [Len: {{data.length}}, SeqNum: {{data.seq_num}}, ACK: {{data.seq_num_acked}}], (Invalid!) SPITFP payload[{{data.payload}}] Checksum: {{data.checksum}}'
        }
    }

    def __init__(self):
        dev_id = int(re.findall('[^\(]*\((\d*)\)', self.device)[0])
        self.packet_buffer = PacketBuffer(self.direction == 'MOSI', device_infos[dev_id], self.output_format)


    def decode(self, frame):
        self.packet_buffer.add_frame(frame)
        return self.packet_buffer.find_packet(frame.type)


